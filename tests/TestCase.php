<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use tcCore\User;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    /**
     * If true, setup has run at least once.
     *
     * @var boolean
     */
    protected static $setUpRun = false;

    protected $baseUrl = 'http://test-correct.test';

    const USER_TEACHER = 'p.vries@31.com';

    const USER_BEHEERDER = 'schoolbeheerder@connected-software.com';
    const USER_BEHEERDER_SESSION_HASH = 'CXLtEIpVFXUrR8QjN9OYS4flMP0j6KFDrIML0Z1LABX3HXPmBBOQpUNGrQHQoELFcd2tLI3gRaXzm2sXonuPypynJpwBao7bP5PW';
    const FIORETTI_TEACHER = 'krs@fioretti.nl';

    public static function getAuthRequestData($overrides = [])
    {
        return array_merge([
            'session_hash' => '5mTzff9qk9TObgv0NfsU7JjLDgnBsRRYSDfASpPEYLb2GjZHSQh1aePy1vhnBq1gFsjWprSU0dsCUgKTJhJVzbIHEEd7Mzw2Y1Y',
            'user'         => static::USER_TEACHER,
        ], $overrides);
    }

    public static function AuthBeheerderGetRequest($url, $params=[]) {

        return sprintf(
            '%s/?session_hash=%s&signature=aaebbf4a062594c979128ec2f2ef477d4f7d08893c6940cc736b62b106f6498f&user=%s&%s',
            $url,
            static::USER_BEHEERDER_SESSION_HASH,
            static::USER_BEHEERDER,
            http_build_query($params, '', '&')
        );
    }

    public static function getBeheerderAuthRequestData($overrides = [])
    {
        return array_merge([
            'session_hash' => 'CXLtEIpVFXUrR8QjN9OYS4flMP0j6KFDrIML0Z1LABX3HXPmBBOQpUNGrQHQoELFcd2tLI3gRaXzm2sXonuPypynJpwBao7bP5PW',
            'user'         => static::USER_BEHEERDER,
        ], $overrides);
    }

    public static function getStudentOneAuthRequestData($overrides = [])
    {
        return self::getUserAuthRequestData(
            User::where('username', 's1@test-correct.nl')->first(),
            $overrides
        );
    }

    public static function getTeacherOneAuthRequestData($overrides = [])
    {
        return self::getUserAuthRequestData(
            User::where('username', 'd1@test-correct.nl')->first(),
            $overrides
        );
    }

    public static function authStudentOneGetRequest($url, $params=[]) {

        return self::authUserGetRequest(
            $url,
            $params,
            User::where('username', 's1@test-correct.nl')->first()
        );
    }

    public static function authTeacherOneGetRequest($url, $params=[]) {

        return self::authUserGetRequest(
            $url,
            $params,
            User::where('username', 'd1@test-correct.nl')->first()
        );
    }

    /**
     * @param $url
     * @param $params
     * @param $user
     */
    private static function authUserGetRequest($url, $params, $user)
    {
        return sprintf(
            '%s/?session_hash=%s&signature=%s&user=%s&%s',
            $url,
            $user->session_hash,
            '58500ec4dc43d4e57fb0c1b1edadc31086cba65cd8c7adc52aa22d569f9a89cf',
            $user->username,
            http_build_query($params, '', '&')
        );
    }

    /**
     * @param $user
     * @param $overrides
     * @return array
     */
    private static function getUserAuthRequestData($user, $overrides=[])
    {
        return array_merge([
            'session_hash' => $user->session_hash,
            'user'         => $user->username,
        ], $overrides);
    }


    protected function setUp(): void
    {
        global $argv;

        parent::setUp(); // TODO: Change the autogenerated stub


        // skip refresh db when running phpunit
        // with a 5th parameter ignoredb for performance;
        // example:
        // phpunit tests/App/FailedLoginTest.php --filter testLoginFailsForEmptyRun ignoredb
        if (!static::$setUpRun) {
            if (!(array_key_exists(5, $argv) && $argv[5] == 'ignoredb')) {
                $this->artisan('test:refreshdb');
                static::$setUpRun = true;
            }
        }
    }

    protected function toetsActiveren($id) {
        $this->updateTestTakeStatus($id, 3);
    }

    protected function toetsInleveren($id) {

        $this->updateTestTakeStatus($id, 9);
    }

    private function updateTestTakeStatus($testTakeId, $status) {
        $response = $this->put(
            sprintf(
                'test_take/%d',
                $testTakeId
            ),
            static::getTeacherOneAuthRequestData(
                ['test_take_status_id' => $status]
            )
        );
        $this->assertEquals(
            $status,
            $response->decodeResponseJson()['test_take_status_id']
        );

        $response->assertStatus(200);
    }


}