<?php
/**
 * Created by PhpStorm.
 * User: erik
 * Date: 12/04/2019
 * Time: 13:18
 */

namespace Tests\Unit;

use tcCore\Factories\FactoryTest;
use tcCore\Factories\FactoryUser;
use tcCore\Factories\Questions\FactoryQuestionCompletionMulti;
use tcCore\Factories\Questions\FactoryQuestionGroup;
use tcCore\Factories\Questions\FactoryQuestionMultipleChoiceARQ;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\FactoryScenarios\FactoryScenarioTestTestWithAllQuestionTypes;
use tcCore\GroupQuestion;
use tcCore\OpenQuestion;
use tcCore\Question;
use Tests\ScenarioLoader;
use Tests\TestCase;

class QuestionBankTest extends TestCase
{
    protected $loadScenario = FactoryScenarioSchoolSimple::class;
    private $teacherOne;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->teacherOne = ScenarioLoader::get('teacher1');
    }

    /** @test */
    public function it_can_create_a_clean_copy_from_a_question_and_update_education_level_year()
    {
        FactoryScenarioTestTestWithAllQuestionTypes::createTest(user: $this->teacherOne);

        $startQuestionCount = Question::count();
        $startOpenQuestionCount = OpenQuestion::count();
        $this->actingAs($this->teacherOne);

        $question = Question::whereType('OpenQuestion')->first();
        $questionInstance = $question->getQuestionInstance();

        $this->assertEquals(1, $questionInstance->education_level_year);
        $newQuestion = $question->createCleanCopy(
            $questionInstance->education_level_id,
            2,
            $questionInstance->subject_id,
            1,
            auth()->user()
        );

        $this->assertNotEquals($question->fresh()->id, $newQuestion->id);
        $this->assertEquals(($startQuestionCount + 1), Question::count());
        $this->assertEquals(($startOpenQuestionCount + 1), OpenQuestion::count());
        $this->assertEquals(2, $newQuestion->education_level_year);

        // check that the original still has the old education_level_id
        $this->assertEquals(1, $question->fresh()->education_level_year);
    }

    /** @test */
    public function it_can_create_a_clean_copy_from_a_question_and_update_education_level()
    {
        FactoryScenarioTestTestWithAllQuestionTypes::createTest(user: $this->teacherOne);

        $startQuestionCount = Question::count();
        $startOpenQuestionCount = OpenQuestion::count();
        $this->actingAs($this->teacherOne);

        $question = Question::whereType('OpenQuestion')->first();
        $questionInstance = $question->getQuestionInstance();

        $this->assertEquals(1, $questionInstance->education_level_id);
        $newQuestion = $question->createCleanCopy(
            education_level_id: 2,
            education_level_year: 2,
            subject_id: $questionInstance->subject_id,
            draft: 1,
            forUser: auth()->user()
        );
        $this->assertNotEquals($question->fresh()->id, $newQuestion->id);
        $this->assertEquals(($startQuestionCount + 1), Question::count());
        $this->assertEquals(($startOpenQuestionCount + 1), OpenQuestion::count());
        $this->assertEquals(2, $newQuestion->education_level_id);

        // check that the original still has the old education_level_id
        $this->assertEquals(1, $question->fresh()->education_level_year);
    }

    /** @test */
    public function it_can_create_a_clean_copy_from_a_question_and_update_subject()
    {
        FactoryScenarioTestTestWithAllQuestionTypes::createTest(user: $this->teacherOne);

        $startQuestionCount = Question::count();
        $startOpenQuestionCount = OpenQuestion::count();
        $this->actingAs($this->teacherOne);

        $question = Question::whereType('OpenQuestion')->first();
        $questionInstance = $question->getQuestionInstance();

        $this->assertEquals(1, $questionInstance->education_level_id);
        $newQuestion = $question->createCleanCopy(
            education_level_id: $questionInstance->education_level_id,
            education_level_year: 2,
            subject_id: 2,
            draft: 1,
            forUser: auth()->user()
        );

        $this->assertNotEquals($question->fresh()->id, $newQuestion->id);
        $this->assertEquals(($startQuestionCount + 1), Question::count());
        $this->assertEquals(($startOpenQuestionCount + 1), OpenQuestion::count());
        $this->assertEquals(2, $newQuestion->subject_id);

        // check that the original still has the old education_level_id
        $this->assertEquals(1, $question->fresh()->education_level_year);
    }

    /** @test */
    public function when_making_a_clean_copy_the_author_of_the_question_should_be_the_current_user()
    {
        $teacherTwo = FactoryUser::createTeacher(ScenarioLoader::get('school_locations')->first(), false)->user;
        FactoryScenarioTestTestWithAllQuestionTypes::createTest(user: $this->teacherOne);

        $this->actingAs($teacherTwo);

        $question = Question::whereType('OpenQuestion')->first();
        $this->assertTrue($question->authors->contains($this->teacherOne));
        $this->assertFalse($question->authors->contains($teacherTwo));

        $questionInstance = $question->getQuestionInstance();
        $newQuestion = $question->createCleanCopy(
            education_level_id: $questionInstance->education_level_id,
            education_level_year: $questionInstance->education_level_year,
            subject_id: $questionInstance->subject_id,
            draft: 1,
            forUser: $teacherTwo,
        );
        $this->assertTrue($newQuestion->authors->contains($this->teacherOne));
        $this->assertTrue($newQuestion->authors->contains($teacherTwo));

        $this->assertTrue($question->authors->contains($this->teacherOne));
        $this->assertfalse($question->authors->contains($teacherTwo));
    }

    /** @test */
    public function it_can_create_a_clean_copy_from_a_group_question()
    {
        FactoryTest::create($this->teacherOne)
            ->addQuestions([
                FactoryQuestionGroup::create()
                    ->addQuestions([
                        FactoryQuestionCompletionMulti::create()
                    ])
            ]);

        $startQuestionCount = Question::count();
        $this->actingAs($this->teacherOne);

        $groupQuestion = GroupQuestion::first();
        $questionInstance = $groupQuestion->getQuestionInstance();

        $this->assertEquals('GroupQuestion', $questionInstance->type);

        $groupQuestion->createCleanCopy(
            education_level_id: $questionInstance->education_level_id,
            education_level_year: $questionInstance->education_level_year,
            subject_id: $questionInstance->subject_id,
            draft: 1,
            forUser: $this->teacherOne,
        );

        $this->assertEquals(($startQuestionCount + 2), Question::count());
    }

    /** @test */
    public function it_should_add_the_new_author_to_all_the_questions_in_the_group()
    {
        $teacherTwo = FactoryUser::createTeacher(ScenarioLoader::get('school_locations')->first(), false)->user;

        FactoryTest::create($this->teacherOne)
            ->addQuestions([
                FactoryQuestionGroup::create()
                    ->addQuestions([
                        FactoryQuestionCompletionMulti::create(),
                        FactoryQuestionMultipleChoiceARQ::create()
                    ])
            ]);


        $this->actingAs($teacherTwo);
        $groupQuestion = GroupQuestion::first();
        $questionInstance = $groupQuestion->getQuestionInstance();

        $newGroupQuestion = $groupQuestion->createCleanCopy(
            education_level_id: $questionInstance->education_level_id,
            education_level_year: $questionInstance->education_level_year,
            subject_id: $questionInstance->subject_id,
            draft: 1,
            forUser: $this->teacherOne
        );

        $this->assertTrue($newGroupQuestion->authors->contains($this->teacherOne));
        $this->assertTrue($newGroupQuestion->authors->contains($teacherTwo));

        $this->assertTrue($groupQuestion->refresh()->authors->contains($this->teacherOne));
        $this->assertFalse($groupQuestion->refresh()->authors->contains($teacherTwo));

        $newGroupQuestion->groupQuestionQuestions->each(function ($gqq) use ($teacherTwo) {
            $this->assertTrue($gqq->question->authors->contains($this->teacherOne));
            $this->assertTrue($gqq->question->authors->contains($teacherTwo));
        });

        $groupQuestion->refresh()->groupQuestionQuestions->each(function ($gqq) use ($teacherTwo) {
            $this->assertTrue($gqq->question->authors->contains($this->teacherOne));
            $this->assertFalse($gqq->question->authors->contains($teacherTwo));
        });
    }
}
