<?php

namespace Tests\Unit;

use tcCore\EduIxRegistration;
use tcCore\Http\Helpers\EduIxService;
use tcCore\User;
use Tests\TestCase;

class EduIxRegistrationTest extends TestCase
{

    use \Illuminate\Foundation\Testing\DatabaseTransactions;

    private $service;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = new EduIxService('1tcts328-i7og-ihri-d7ch-o62jhk0oha2f', 'c18f06a6cc7685149e78ac305094ebef');
    }

    /** @test */
    public function when_init_with_service_it_should_return_a_instance()
    {
        $this->assertInstanceOf(EduIxRegistration::class, EduIxRegistration::initWithService($this->service));
    }

    /** @test */
    public function when_initialized_twice_it_should_return_only_one_instance_not_two()
    {
        $registration =  EduIxRegistration::initWithService($this->service);

        $registration2 =  EduIxRegistration::initWithService($this->service);

        $this->assertTrue($registration->is($registration2));
    }

    /** @test */
    public function when_created_it_should_be_open()
    {
        $this->assertTrue(
            EduIxRegistration::initWithService($this->service)->isOpen()
        );
    }

    /** @test */
    public function a_user_can_be_added_to_a_registration()
    {
        $studentOne = User::find(1483);

        $instance = EduIxRegistration::initWithService($this->service)->addUser($studentOne);
        $instance->save();

        $this->assertTrue($instance->fresh()->user->is($studentOne));
    }

    /** @test */
    public function when_a_user_is_added_to_a_registration_it_is_closed()
    {
        $studentOne = User::find(1483);

        $instance = EduIxRegistration::initWithService($this->service)->addUser($studentOne);
        $instance->save();

        $this->assertFalse($instance->isOpen());
    }

    /**
     * @test
     */
    public function when_a_user_is_already_attached_to_a_registration_and_you_try_to_add_a_new_one_it_should_throw_an_error()
    {
        $studentOne = User::find(1483);
        $studentTwo = User::find(1484);

        $instance = EduIxRegistration::initWithService($this->service)->addUser($studentOne);
        $instance->save();
        try {
            $instance->addUser($studentTwo);
            $instance->save();
            $this->assertTrue(false);// it should never hit this code;
        } catch (\Exception $exception) {
            $this->assertTrue(true);
        }

        $this->assertTrue($instance->fresh()->user->is($studentOne));
    }
}
