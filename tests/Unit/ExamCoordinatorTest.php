<?php

namespace Tests\Unit;

use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use tcCore\Factories\FactorySchoolLocation;
use tcCore\Factories\FactoryUser;
use tcCore\FactoryScenarios\FactoryScenarioSchoolForExamCoordinator;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\FactoryScenarios\FactoryScenarioTestTakeRated;
use tcCore\School;
use tcCore\TestTake;
use tcCore\TestTakeStatus;
use Tests\ScenarioLoader;
use Tests\TestCase;

class ExamCoordinatorTest extends TestCase
{
    protected $loadScenario = FactoryScenarioSchoolForExamCoordinator::class;
    private $d1;
    private $d2;
    private $schoolManager;
    private $schoolManager2;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->d1 = ScenarioLoader::get('teachers')->first();
        $this->d1->session_hash = $this->d1->generateSessionHash();
        $this->actingAs($this->d1);
        $this->d2 = ScenarioLoader::get('teachers')->last();
        $this->schoolManager = ScenarioLoader::get('school_locations')->first()->schoolManagers->first();
        $this->schoolManager2 = ScenarioLoader::get('school_locations')->last()->schoolManagers->first();
    }

    /** @test */
    public function can_not_assign_other_than_enum_values_to_exam_coordinator_for_column()
    {
        $this->expectException(QueryException::class);
        $this->d1->setAttribute('is_examcoordinator_for', 'something');
        $this->d1->save();
    }

    /** @test */
    public function can_assign_enum_values_to_exam_coordinator_for_column()
    {
        $value = 'SCHOOL_LOCATION';

        $this->d1->setAttribute('is_examcoordinator_for', $value);

        $this->d1->save();
        $this->d1->refresh();

        $this->assertEquals($value, $this->d1->getAttribute('is_examcoordinator_for'));
    }

    /** @test */
    public function can_add_school_locations_to_teacher()
    {
        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        School::first()->schoolLocations->each(function ($location) {
            $this->d1->addSchoolLocation($location);
        });

        $this->assertEquals(School::first()->schoolLocations->count(), $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_remove_school_locations_from_teacher()
    {
        $schoolLocations = School::first()->schoolLocations;
        $schoolLocations->each(function ($location) {
            $this->d1->addSchoolLocation($location);
        });
        $this->assertEquals(2, $this->d1->allowedSchoolLocations()->count());


        $locationsToRemove = $schoolLocations->reject(fn($location) => $location->getKey() === $this->schoolManager->schoolLocation->getKey());

        $locationsToRemove->each(function ($location) {
            $this->d1->removeSchoolLocation($location);
        });

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_make_teacher_with_api_call_as_schoolmanager()
    {
        $this->assertFalse($this->d1->isValidExamCoordinator());

        $this->setTeacherAsSchoolExamCoordinator()->assertSuccessful();

        $this->assertTrue($this->d1->refresh()->isValidExamCoordinator());
    }

    /** @test */
    public function can_add_school_locations_to_teacher_when_is_exam_coordinator_for_school()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();
        $this->d1->refresh();
        $this->assertFalse($this->d1->isValidExamCoordinator());
        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setTeacherAsSchoolExamCoordinator()->assertSuccessful();

        $this->assertTrue($this->d1->refresh()->isValidExamCoordinator());
        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_remove_school_locations_from_teacher_when_is_exam_coordinator_for_school_is_changed_to_school_location()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setTeacherAsSchoolExamCoordinator()->assertSuccessful();

        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());

        $this->setTeacherAsSchoolLocationExamCoordinator()->assertSuccessful();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }


    /** @test */
    public function can_remove_school_locations_from_teacher_when_is_exam_coordinator_for_school_is_changed_to_none()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setTeacherAsSchoolExamCoordinator()->assertSuccessful();

        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());

        $this->setTeacherAsNoExamCoordinator()->assertSuccessful();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_change_teacher_user_school_location_id_to_school_manager_school_location_id_when_is_exam_coordinator_set_to_none()
    {
        $this->assertNotEquals($this->schoolManager2->schoolLocation->getKey(), $this->d1->schoolLocation->getKey());

        $this->setTeacherAsSchoolExamCoordinator(schoolManager: $this->schoolManager2)->assertSuccessful();

        $this->setTeacherAsNoExamCoordinator(schoolManager: $this->schoolManager2)->assertSuccessful();

        $this->assertEquals($this->schoolManager2->schoolLocation->getKey(), $this->d1->refresh()->schoolLocation->getKey());
    }

    /** @test */
    public function can_change_teacher_user_school_location_id_to_school_manager_school_location_id_when_is_exam_coordinator_set_to_school_location()
    {
        $this->d1->refresh();
        $this->assertNotEquals($this->schoolManager2->schoolLocation->getKey(), $this->d1->schoolLocation->getKey());

        $this->setTeacherAsSchoolExamCoordinator(schoolManager: $this->schoolManager2)->assertSuccessful();

        $this->setTeacherAsSchoolLocationExamCoordinator(schoolManager: $this->schoolManager2)->assertSuccessful();

        $this->assertEquals($this->schoolManager2->schoolLocation->getKey(), $this->d1->refresh()->schoolLocation->getKey());
    }

    /** @test */
    public function can_remove_session_hash_when_exam_coordinator_scope_get_changed()
    {
        $this->assertNotEmpty($this->d1->session_hash);

        $this->setTeacherAsSchoolExamCoordinator()->assertSuccessful();

        $this->setTeacherAsSchoolLocationExamCoordinator()->assertSuccessful();

        $this->assertEmpty($this->d1->refresh()->session_hash);
    }

    /**
     * @param null $user
     * @return string
     */
    private function getApiUserUrl($user = null): string
    {
        return sprintf('api-c/user/%s', $user ? $user->uuid : $this->d1->uuid);
    }

    private function setTeacherAsSchoolExamCoordinator($teacher = null, $schoolManager = null)
    {
        return $this->put(
            $this->getApiUserUrl($teacher),
            static::getUserAuthRequestData($schoolManager ?? $this->schoolManager, [
                'is_examcoordinator'     => '1',
                'is_examcoordinator_for' => 'SCHOOL'
            ])
        );
    }

    private function setTeacherAsSchoolLocationExamCoordinator($teacher = null, $schoolManager = null)
    {
        return $this->put(
            $this->getApiUserUrl($teacher),
            static::getUserAuthRequestData($schoolManager ?? $this->schoolManager, [
                'is_examcoordinator'     => '1',
                'is_examcoordinator_for' => 'SCHOOL_LOCATION'
            ])
        );
    }

    private function setTeacherAsNoExamCoordinator($teacher = null, $schoolManager = null)
    {
        return $this->put(
            $this->getApiUserUrl($teacher),
            static::getUserAuthRequestData($schoolManager ?? $this->schoolManager, [
                'is_examcoordinator'     => '0',
                'is_examcoordinator_for' => 'NONE'
            ])
        );
    }

    /** @test */
    public function can_get_all_taken_tests_from_school_location_when_exam_coordinator_from_scope_filtered()
    {
        $schoolLocation = ScenarioLoader::get('school_locations')->first();
        $teachers = $schoolLocation->users()->whereRelation('roles', 'name', '=', 'Teacher')->get();
        $teacherOne = $teachers->first();
        $teacherTwo = $teachers->last();

        FactoryScenarioTestTakeRated::create($teacherOne);
        $this->actingAs($teacherTwo);
        $ratedTestTakesForD2 = TestTake::filtered(['test_take_status_id' => (string)TestTakeStatus::STATUS_RATED])->count();

        $this->assertFalse($teacherTwo->isValidExamCoordinator());
        $this->setTeacherAsSchoolExamCoordinator($teacherTwo)->assertSuccessful();

        $user = $teacherTwo->refresh();
        $this->actingAs($user);

        $coordinatorCount = TestTake::filtered(['test_take_status_id' => (string)TestTakeStatus::STATUS_RATED])->count();
        $totalSchoolLocationCount = TestTake::where('test_take_status_id', (string)TestTakeStatus::STATUS_RATED)
            ->belongsToSchoolLocation($teacherTwo)->count();

        $this->assertGreaterThan($ratedTestTakesForD2, $coordinatorCount);
        $this->assertEquals($totalSchoolLocationCount, $coordinatorCount);
    }

    /** @test */
    public function can_open_taken_test_take_of_unrelated_subject_and_teacher()
    {
        $this->actingAs($this->d1);
        $testTake = FactoryScenarioTestTakeRated::createTestTake($this->d1);

        $this->assertFalse($testTake->isAllowedToView($this->d2));

        $this->setTeacherAsSchoolExamCoordinator($this->d2)->assertSuccessful();
        $this->d2->refresh();
        $this->d2->schoolLocation()->associate($testTake->schoolLocation);

        $this->assertTrue($this->d2->isValidExamCoordinator());
        $this->assertEquals($this->d2->schoolLocation, $testTake->schoolLocation);
        $this->assertTrue($testTake->isAllowedToView($this->d2));
    }
}