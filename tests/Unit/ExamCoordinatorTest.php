<?php

namespace Tests\Unit;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\DB;
use Livewire\Livewire;
use tcCore\Http\Livewire\Teacher\TestsOverview;
use tcCore\School;
use tcCore\User;
use Tests\TestCase;

class ExamCoordinatorTest extends TestCase
{
    use DatabaseTransactions;

    private $d1;
    private $schoolManager;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->d1 = self::getTeacherOne();
        $this->schoolManager = self::getSchoolBeheerder();
        $this->actingAs($this->schoolManager);
    }

    /** @test */
    public function can_not_assign_other_than_enum_values_to_exam_coordinator_for_column()
    {
        $this->d1->setAttribute('is_examcoordinator_for', 'something');

        $this->d1->save();
        $this->d1->refresh();

        $this->assertEmpty($this->d1->getAttribute('is_examcoordinator_for'));
    }

    /** @test */
    public function can_assign_enum_values_to_exam_coordinator_for_column()
    {
        $enums = collect($this->d1->getPossibleEnumValues('is_examcoordinator_for'));

        $this->d1->setAttribute('is_examcoordinator_for', $enums->first());

        $this->d1->save();
        $this->d1->refresh();

        $this->assertEquals($enums->first(),$this->d1->getAttribute('is_examcoordinator_for'));
    }

    /** @test */
    public function can_add_school_locations_to_teacher()
    {

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        School::find(1)->schoolLocations->each(function ($location) {
            $this->d1->addSchoolLocation($location);
        });

        $this->assertEquals(5, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_remove_school_locations_from_teacher()
    {
        $this->schoolManager = User::whereUsername(self::USER_SCHOOLBEHEERDER)->first();

        $schoolLocations = School::find(1)->schoolLocations;
        $schoolLocations->each(function ($location) {
            $this->d1->addSchoolLocation($location);
        });
        $this->assertEquals(5, $this->d1->allowedSchoolLocations()->count());


        $locationsToRemove = $schoolLocations->reject(fn($location) => $location->getKey() === $this->schoolManager->schoolLocation->getKey());

        $locationsToRemove->each(function ($location) {
           $this->d1->removeSchoolLocation($location);
        });

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_make_teacher_with_api_call_as_schoolmanager()
    {
        $this->assertFalse($this->d1->isValidExamCoordinator());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->assertTrue($this->d1->refresh()->isValidExamCoordinator());
    }

    /** @test */
    public function can_add_school_locations_to_teacher_when_is_exam_coordinator_for_school()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();

        $this->assertFalse($this->d1->isValidExamCoordinator());
        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->assertTrue($this->d1->refresh()->isValidExamCoordinator());
        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_remove_school_locations_from_teacher_when_is_exam_coordinator_for_school_is_changed_to_school_location()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());

        $this->setD1AsSchoolLocationExamCoordinator()->assertSuccessful();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }


    /** @test */
    public function can_remove_school_locations_from_teacher_when_is_exam_coordinator_for_school_is_changed_to_none()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations()->count();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->assertEquals($schoolLocationsInSchool, $this->d1->allowedSchoolLocations()->count());

        $this->setD1AsNoExamCoordinator()->assertSuccessful();

        $this->assertEquals(1, $this->d1->allowedSchoolLocations()->count());
    }

    /** @test */
    public function can_change_teacher_user_school_location_id_to_school_manager_school_location_id_when_is_exam_coordinator_set_to_none()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations->where('id','!=', $this->d1->school_location_id);

        $this->assertNotEquals($this->schoolManager->schoolLocation->getKey(), $this->d1->schoolLocation->getKey());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->setD1AsNoExamCoordinator()->assertSuccessful();

        $this->assertEquals($this->schoolManager->schoolLocation->getKey(), $this->d1->refresh()->schoolLocation->getKey());
    }

    /** @test */
    public function can_change_teacher_user_school_location_id_to_school_manager_school_location_id_when_is_exam_coordinator_set_to_school_location()
    {
        $schoolLocationsInSchool = School::find(1)->schoolLocations->where('id','!=', $this->d1->school_location_id);

        $this->assertNotEquals($this->schoolManager->schoolLocation->getKey(), $this->d1->schoolLocation->getKey());

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->setD1AsSchoolLocationExamCoordinator()->assertSuccessful();

        $this->assertEquals($this->schoolManager->schoolLocation->getKey(), $this->d1->refresh()->schoolLocation->getKey());
    }

    /** @test */
    public function can_remove_session_hash_when_exam_coordinator_scope_get_changed()
    {
        $this->assertNotEmpty($this->d1->session_hash);

        $this->setD1AsSchoolExamCoordinator()->assertSuccessful();

        $this->setD1AsSchoolLocationExamCoordinator()->assertSuccessful();

        $this->assertEmpty($this->d1->refresh()->session_hash);
    }

    /**
     * @return string
     */
    private function getApiUserUrl(): string
    {
        return sprintf('api-c/user/%s', $this->d1->uuid);
    }

    private function setD1AsSchoolExamCoordinator()
    {
        return $this->put(
            $this->getApiUserUrl(),
            static::getSchoolBeheerderAuthRequestData([
                'is_examcoordinator'     => '1',
                'is_examcoordinator_for' => 'SCHOOL'
            ])
        );
    }
    private function setD1AsSchoolLocationExamCoordinator()
    {
        return $this->put(
            $this->getApiUserUrl(),
            static::getSchoolBeheerderAuthRequestData([
                'is_examcoordinator'     => '1',
                'is_examcoordinator_for' => 'SCHOOL_LOCATION'
            ])
        );
    }
    private function setD1AsNoExamCoordinator()
    {
        return $this->put(
            $this->getApiUserUrl(),
            static::getSchoolBeheerderAuthRequestData([
                'is_examcoordinator'     => '0',
                'is_examcoordinator_for' => 'NONE'
            ])
        );
    }
}