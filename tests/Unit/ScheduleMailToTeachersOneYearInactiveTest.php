<?php

namespace Tests\Unit;

use Carbon\Carbon;
use \Illuminate\Support\Facades\Config;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use tcCore\Console\Commands\ScheduleMailToTeachersOneYearInactive;
use tcCore\Factories\FactorySchool;
use tcCore\Factories\FactorySchoolLocation;
use tcCore\Factories\FactoryUser;
use tcCore\Lib\User\Factory;
use tcCore\LoginLog;
use tcCore\School;
use tcCore\SchoolLocation;
use tcCore\User;
use Tests\TestCase;

class ScheduleMailToTeachersOneYearInactiveTest extends TestCase
{

    private SchoolLocation $schoolLocationActive;
    private SchoolLocation $schoolLocationInactive;
    private Carbon $sevenMonthsAgo;
    private Carbon $thirteenMonthsAgo;
    private Carbon $twentyThreeMonthsAgo;
    private Carbon $twentyFiveMonthsAgo;
    private array $users;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->sevenMonthsAgo = \Carbon\Carbon::now()->subMonths(7);
        $this->thirteenMonthsAgo = \Carbon\Carbon::now()->subMonths(13);
        $this->twentyThreeMonthsAgo = \Carbon\Carbon::now()->subMonths(23);
        $this->twentyFiveMonthsAgo = \Carbon\Carbon::now()->subMonths(25);
        $school = FactorySchool::create('S100')->school;

        $this->schoolLocationActive = FactorySchoolLocation::create(
            $school,
            'SLActive101',
            [
                'activated' => true
            ]
        )->schoolLocation;

        $this->schoolLocationInactive = FactorySchoolLocation::create(
            $school,
            'SLInactive101',
            [
                'activated' => false
            ]
        )->schoolLocation;

    }

    /**
     * created today(now) section, in this section will only the login log change
     *  - no login log
     *  - today login log
     *  - 7 months ago login log
     */

    public function test_teacher_created_now_no_last_login_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false)->user;

        $this->assertEquals(
            0,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_now_last_login_now_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false)->user;
        LoginLog::create(
            ['user_id' => $user->getKey()]
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_now_last_login_seven_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false)->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    /**
     * created Seven months ago section, in this section will only the login log change
     *  - no login log
     *  - 7 months ago login log
     */

    public function test_teacher_created_seven_months_no_last_login_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->sevenMonthsAgo,
        ])->user;

        $this->assertEquals(
            0,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_seven_months_last_login_now_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->sevenMonthsAgo,
        ])->user;
        LoginLog::create(
            ['user_id' => $user->getKey()]
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_seven_months_last_login_seven_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->sevenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    /**
     * created thirteen months section, in this section will only the login log change
     *  - no login log
     *  - 7 months ago login log
     *  - 13 months ago login log
     *  - 23 months ago login log
     *  - 25 months ago login log
     */

    public function test_teacher_created_thirteen_months_no_last_login_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $this->assertEquals(
            0,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_last_login_now_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        LoginLog::create(
            ['user_id' => $user->getKey()]
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_last_login_seven_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_last_login_thirteen_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->thirteenMonthsAgo;
        $loginLog->save();

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_last_login_twenty_three_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyThreeMonthsAgo;
        $loginLog->save();

        $this->assertEquals(
            1,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_last_login_twenty_five_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyFiveMonthsAgo;
        $loginLog->save();

        $this->assertEquals(
            1,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertFalse($this->userInList($user));
    }

    /**
     * created twenty three months section, in this section will only the login log change
     *  - no login log
     *  - 7 months ago login log
     *  - 13 months ago login log
     *  - 23 months ago login log
     *  - 25 months ago login log
     */

    public function test_teacher_created_twenty_three_months_no_last_login_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $this->assertEquals(
            0,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_now_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        LoginLog::create(
            ['user_id' => $user->getKey()]
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_seven_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_thirteen_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->thirteenMonthsAgo;
        $loginLog->save();

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_twenty_three_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyThreeMonthsAgo;
        $loginLog->save();

        $this->assertEquals(
            1,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertTrue($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_twenty_five_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyFiveMonthsAgo;
        $loginLog->save();

        $this->assertEquals(
            1,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertFalse($this->userInList($user));
    }

    /**
     * created Seven months ago section, in this section will only the login log change
     *  - no login log
     *  - 7 months ago login log
     *  - 13 months ago login log
     */

    public function test_teacher_created_twenty_five_months_no_last_login_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;

        $this->assertEquals(
            0,
            LoginLog::where('user_id', $user->getKey())->count()
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_five_months_last_login_now_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;
        LoginLog::create(
            ['user_id' => $user->getKey()]
        );

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_five_months_last_login_seven_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_five_months_last_login_thirteen_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->thirteenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_five_months_last_login_twenty_five_months_active_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyFiveMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    /**
     * in this section is to be tested if all extra items of the query also give the right results.
     *  - right dates but inactive school
     *  - wrong dates and inactive school
     *  - half wrong and half right dates and inactive school 2 functions
     */
    public function test_teacher_created_thirteen_months_last_login_twenty_three_months_inactive_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationInactive, false, [
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->thirteenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }


    public function test_teacher_created_thirteen_months_last_login_seven_months_inactive_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationInactive, false, [
            'created_at' => $this->sevenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->sevenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_three_months_last_login_twenty_five_months_inactive_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationInactive, false, [
            'created_at' => $this->twentyThreeMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyFiveMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_twenty_five_months_last_login_twenty_three_months_inactive_school(){
        $user = FactoryUser::createTeacher($this->schoolLocationInactive, false, [
            'created_at' => $this->twentyFiveMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->twentyThreeMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    /**
     * this will test for teachers with test-correct emails
     *  - with login log 13 months and created 13 months
     *  - with no login log and created 13 months
     */

    public function test_teacher_created_thirteen_months_last_login_thirteen_months_active_school_tc_email(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'username' => 'robert'.rand(1000,9999).'@test-correct.nl',
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->thirteenMonthsAgo;
        $loginLog->save();

        $this->assertFalse($this->userInList($user));
    }

    public function test_teacher_created_thirteen_months_no_last_login_active_school_tc_email(){
        $user = FactoryUser::createTeacher($this->schoolLocationActive, false, [
            'username' => 'robert'.rand(1000,9999).'@test-correct.nl',
            'created_at' => $this->thirteenMonthsAgo,
        ])->user;

        $this->assertFalse($this->userInList($user));
    }

    ///////////
    /// supporting functions are found below

    private function userInList(User $user)
    {
        return collect(
            (new ScheduleMailToTeachersOneYearInactive())
                ->getListOfInactiveTeachers()
        )
            ->map(fn($value) => $value->id)
            ->contains($user->id);

    }
}

