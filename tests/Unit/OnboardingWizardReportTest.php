<?php
/**
 * Created by PhpStorm.
 * User: erik
 * Date: 12/04/2019
 * Time: 13:18
 */

namespace Tests\Unit;

use Carbon\Carbon;
use Ramsey\Uuid\Uuid;
use tcCore\Factories\FactoryTest;
use tcCore\Factories\FactoryTestTake;
use tcCore\Factories\Questions\FactoryQuestionOpenShort;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\FactoryScenarios\FactoryScenarioTestTakeDiscussed;
use tcCore\FactoryScenarios\FactoryScenarioTestTakeRated;
use tcCore\LoginLog;
use tcCore\OnboardingWizardReport;
use tcCore\OnboardingWizardStep;
use Tests\ScenarioLoader;
use Tests\TestCase;
use Tests\Unit\Http\Helpers\OnboardingTestHelper;

class OnboardingWizardReportTest extends TestCase
{
    protected $loadScenario = FactoryScenarioSchoolSimple::class;
    private $teacherOne;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->teacherOne = ScenarioLoader::get('teacher1');
        $this->actingAs($this->teacherOne);

        $onboardingTestHelper = new OnboardingTestHelper();
        $onboardingTestHelper->createNewWizardWithSteps();

        OnboardingWizardReport::updateForUser($this->teacherOne);
    }

    /** @test */
    public function it_should_create_a_new_report_when_user_has_no_record()
    {
        OnboardingWizardReport::truncate();

        $this->assertCount(
            0,
            OnboardingWizardReport::all()
        );

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertCount(
            1,
            OnboardingWizardReport::all()
        );
    }

    /** @test */
    public function it_should_update_a_report_when_a_user_already_has_a_record()
    {
        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertCount(
            1,
            OnboardingWizardReport::all()
        );
    }

    /** @test */
    public function it_should_contain_the_email_address_of_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->username,
            OnboardingWizardReport::first()->user_email
        );
    }

    /** @test */
    public function it_should_update_a_report_when_has_last_loggedin()
    {
        $this->assertNotEquals(
            now(),
            OnboardingWizardReport::first()->user_last_login
        );

        $this->teacherOne->loginLogs()->save(new LoginLog);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            now(),
            OnboardingWizardReport::first()->user_last_login
        );
    }

    /** @test */
    public function it_should_contain_the_name_of_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->name,
            OnboardingWizardReport::first()->user_name
        );
    }

    /** @test */
    public function it_should_contain_the_created_at_for_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->created_at,
            OnboardingWizardReport::first()->user_created_at
        );
    }

    /** @test */
    public function it_should_contain_the_first_name_for_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->name_first,
            OnboardingWizardReport::first()->user_name_first
        );
    }

    /** @test */
    public function it_should_contain_the_name_suffix_for_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->name_suffix,
            OnboardingWizardReport::first()->user_name_suffix
        );
    }

    /** @test */
    public function it_should_contain_the_name_of_the_school_location_for_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->schoolLocation->name,
            OnboardingWizardReport::first()->school_location_name
        );
    }

    /** @test */
    public function it_should_contain_the_customer_code_of_the_school_location_for_the_user()
    {
        $this->assertEquals(
            $this->teacherOne->schoolLocation->customer_code,
            OnboardingWizardReport::first()->school_location_customer_code
        );
    }

    /** @test */
    public function it_should_contain_the_count_of_the_items_created_by_the_user()
    {
        $this->assertEquals(
            0,
            OnboardingWizardReport::first()->test_items_created_amount
        );

        FactoryTest::create($this->teacherOne)
            ->addQuestions([
                FactoryQuestionOpenShort::create()
            ]);
        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            1,
            OnboardingWizardReport::first()->test_items_created_amount
        );
    }

    /** @test */
    public function it_should_contain_the_amount_of_tests_created_by_the_user()
    {
        $this->assertEquals(
            0,
            OnboardingWizardReport::first()->tests_created_amount
        );

        FactoryTest::create($this->teacherOne);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            1,
            OnboardingWizardReport::first()->tests_created_amount
        );
    }

    /** @test */
    public function it_should_contain_the_first_planned_date_of_a_test_created_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->first_test_planned_date);

        $test = FactoryTest::create($this->teacherOne)->getTestModel();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-10 00:00:00']);
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-11 00:00:00']);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '2020-03-10 00:00:00',
            OnboardingWizardReport::first()->first_test_planned_date
        );
    }

    /** @test */
    public function it_should_contain_the_last_planned_date_of_a_test_created_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->last_test_planned_date);

        $test = FactoryTest::create($this->teacherOne)->getTestModel();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-10 00:00:00']);
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-11 00:00:00']);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '2020-03-11 00:00:00',
            OnboardingWizardReport::first()->last_test_planned_date
        );
    }

    /** @test */
    public function it_should_contain_the_first_date_of_a_test_taken_created_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->first_test_taken_date);

        $test = FactoryTest::create($this->teacherOne)->getTestModel();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2019-05-24 13:52:42'])->setStatusTaken();

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '2019-05-24 13:52:42',
            OnboardingWizardReport::first()->first_test_taken_date
        );
    }

    /** @test */
    public function it_should_contain_the_last_date_of_a_test_taken_created_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->last_test_taken_date);

        $test = FactoryTest::create($this->teacherOne)->getTestModel();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-10 00:00:00'])->setStatusTaken();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-11 00:00:00'])->setStatusTaken();

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '2020-03-11 00:00:00',
            OnboardingWizardReport::first()->last_test_taken_date
        );
    }

    /** @test */
    public function it_should_contain_the_amount_of_the_tests_taken_created_by_the_user()
    {
        $this->assertEquals(0, OnboardingWizardReport::first()->tests_taken_amount);

        $test = FactoryTest::create($this->teacherOne)->getTestModel();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-10 00:00:00'])->setStatusTaken();
        FactoryTestTake::create($test)->setProperties(['time_start' => '2020-03-11 00:00:00'])->setStatusTaken();

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            2,
            OnboardingWizardReport::first()->tests_taken_amount
        );
    }

    /** @test */
    public function it_should_contain_the_test_take_count_discussed_by_the_user()
    {
        $this->assertEquals(0, OnboardingWizardReport::first()->tests_discussed_amount);

        FactoryScenarioTestTakeDiscussed::create(user: $this->teacherOne);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            1,
            OnboardingWizardReport::first()->tests_discussed_amount
        );
    }

    /** @test */
    public function it_should_contain_the_test_take_rated_first_date_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->first_test_rated_date);

        FactoryScenarioTestTakeRated::create($this->teacherOne);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            Carbon::now()->format('Y-m-d'),
            Carbon::parse(OnboardingWizardReport::first()->first_test_rated_date)->format('Y-m-d')
        );
    }


    /** @test */
    public function it_should_contain_the_test_take_rated_last_date_by_the_user()
    {
        $this->assertNull(OnboardingWizardReport::first()->last_test_rated_date);

        FactoryScenarioTestTakeRated::create($this->teacherOne);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            Carbon::now()->format('Y-m-d'),
            Carbon::parse(OnboardingWizardReport::first()->last_test_rated_date)->format('Y-m-d')
        );
    }

    /** @test */
    public function it_should_contain_onboarding_wizard_main_time_completing_step_by_the_user()
    {
        $this->teacherOne->onboardingWizardUserSteps()->create([
            'id' => Uuid::uuid4(),
           'onboarding_wizard_step_id' => OnboardingWizardStep::first()->getKey(),
        ]);

        $onboardingTestHelper = new OnboardingTestHelper();
        $onboardingTestHelper->createNewWizardWithSteps(['title' => 'TestWizard 2.0']);

        sleep(10);

        $this->teacherOne->onboardingWizardUserSteps()->create([
            'id' => Uuid::uuid4(),
            'onboarding_wizard_step_id' => OnboardingWizardStep::latest()->first()->getKey(),
        ]);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '5 seconden', // 10 seconds sleep / 2 steps
            OnboardingWizardReport::first()->average_time_finished_demo_tour_steps_hours
        );
    }

    /** @test */
    public function it_should_contain_the_onboarding_wizard_last_action_in_hours_by_the_user()
    {
        $this->teacherOne->onboardingWizardUserSteps()->create([
            'id' => Uuid::uuid4(),
            'onboarding_wizard_step_id' => OnboardingWizardStep::first()->getKey(),
        ]);
        $this->teacherOne->onboardingWizardUserSteps()->update(['created_at' => Carbon::now()->subHour()]);

        OnboardingWizardReport::updateForUser($this->teacherOne);

        $this->assertEquals(
            '1 uur geleden',
            OnboardingWizardReport::first()->current_demo_tour_step_since_hours
        );
    }

    /** @test */
    public function it_should_contain_a_comma_delimited_string_of_section_for_the_user()
    {
        $this->assertEquals(
            ',Nederlands,',
            OnboardingWizardReport::first()->user_sections
        );
    }
}
