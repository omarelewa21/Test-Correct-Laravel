<?php

namespace Tests\Unit\FactoryTests\TestFactory;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use tcCore\Factories\Questions\FactoryQuestionOpenWriting;
use Tests\ScenarioLoader;
use Illuminate\Foundation\Testing\WithFaker;
use tcCore\Factories\FactoryTest;
use tcCore\Factories\Questions\FactoryQuestionOpenLong;
use tcCore\Factories\Questions\FactoryQuestionOpenShort;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\OpenQuestion;
use tcCore\TestQuestion;
use Tests\TestCase;

/**
 * FactoryQuestionOpenTest
 *
 *
 */
class FactoryQuestionOpenTest extends TestCase
{
    use WithFaker;

    protected $loadScenario = FactoryScenarioSchoolSimple::class;
    private mixed $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = ScenarioLoader::get('user');
    }

    /** @test */
    public function can_add_an_open_short_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountOpenQuestions = OpenQuestion::count();
        $testFactory = FactoryTest::create($this->user);

        $testFactory->addQuestions([
            FactoryQuestionOpenShort::create()
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());
        $this->assertEquals($startCountOpenQuestions + 1, OpenQuestion::count());
    }

    /** @test */
    public function can_add_an_open_long_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountOpenQuestions = OpenQuestion::count();

        $testFactory = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionOpenLong::create()
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());
        $this->assertEquals($startCountOpenQuestions + 1, OpenQuestion::count());
    }

    /** @test */
    public function can_add_open_question_with_correct_test_id()
    {
        $testFactory = FactoryTest::create($this->user);
        $testId = $testFactory->getTestId();

        $testFactory->addQuestions([
            FactoryQuestionOpenShort::create()
        ]);
        $testQuestionTestId = $testFactory
            ->getPropertyByName('questions')[0]
            ->getPropertyByName('questionProperties')['test_id'];

        $this->assertEquals($testId, $testQuestionTestId);
    }

    /** @test */
    public function can_add_a_custom_answer_to_a_open_short_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountOpenQuestions = OpenQuestion::count();
        $customAnswer = '<p>the answer is one</p>';

        $testFactory = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionOpenLong::create()->addAnswer(['answer' => $customAnswer])
        ]);

        $this->assertGreaterThan($startCountQuestions, TestQuestion::count());
        $this->assertGreaterThan($startCountOpenQuestions, OpenQuestion::count());


        $this->assertEquals(
            $customAnswer,
            $testFactory
                ->getPropertyByName('questions')[0]
                ->getPropertyByName('questionProperties')['answer']
        );
        $this->assertDatabaseHas('open_questions', ['answer' => $customAnswer]);
    }

    /**
     * @dataProvider OpenShortPropertiesProvider
     * @test
     */
    public function can_add_custom_properties_to_a_open_question(array $properties)
    {
        $startCountQuestions = TestQuestion::count();

        $testFactory = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionOpenShort::create()->setProperties($properties)
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());

        $testFactoryFirstQuestionProperties = $testFactory
            ->getPropertyByName('questions')[0]
            ->getPropertyByName('questionProperties');

        foreach ($properties as $key => $value) {
            $this->assertTrue(
                key_exists($key, $testFactoryFirstQuestionProperties),
                'Array key does not exist in question properties array'
            );
            $this->assertTrue(
                $testFactoryFirstQuestionProperties[$key] == $value,
                'Entered value: [ ' . $value . ' ], does not exist in question properties array at key [ ' . $key . ' ]'
            );
            $this->assertTrue(
                in_array($value, $testFactoryFirstQuestionProperties, true),
                'Entered value: [ ' . $value . ' ], does not exist in question properties array'
            );
        }
    }

    public function OpenShortPropertiesProvider()
    {
        return [
            'question'        => [
                [
                    'question' => '<p>Arbitrary new question</p>',
                ]
            ],
            'all_or_nothing'  => [
                [
                    'all_or_nothing' => true,
                ]
            ],
            'answer'          => [
                [
                    'answer' => '<p>new answer</p>',
                ]
            ],
            'add_to_database' => [
                [
                    'add_to_database' => false,
                ]
            ],
        ];
    }

    public function defaultValuesProvider(): array
    {
        return [
            'long'    => [
                [
                    'question' => FactoryQuestionOpenLong::create(),
                    'spell_check_available' => false,
                    'text_formatting'       => true,
                    'mathml_functions'      => true,
                    'restrict_word_amount'  => false,
                    'max_words'             => null,
                ]
            ],
            'writing' => [
                [
                    'question' => FactoryQuestionOpenWriting::create(),
                    'spell_check_available' => true,
                    'text_formatting'       => true,
                    'mathml_functions'      => true,
                    'restrict_word_amount'  => false,
                    'max_words'             => null,
                ]
            ],
            'short'   => [
                [
                    'question' => FactoryQuestionOpenShort::create(),
                    'spell_check_available' => false,
                    'text_formatting'       => false,
                    'mathml_functions'      => false,
                    'restrict_word_amount'  => true,
                    'max_words'             => 50,
                ]
            ]
        ];
    }

    /**
     * @dataProvider defaultValuesProvider
     * @test
     */
    public function created_open_question_has_correct_defaults(array $properties)
    {
        $question = array_shift($properties);
        foreach ($properties as $property => $value) {
            $this->assertEquals($value, $question->questionProperties[$property]);
        }
    }
}
