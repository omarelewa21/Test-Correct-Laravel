<?php

namespace Tests\Unit\FactoryTests\TestFactory;

use tcCore\Factories\Questions\FactoryQuestionGroup;
use tcCore\Factories\Questions\FactoryQuestionMultipleChoice;
use tcCore\Factories\Questions\FactoryQuestionOpenLong;
use tcCore\Factories\Questions\FactoryQuestionOpenShort;
use tcCore\Factories\Questions\FactoryQuestionRanking;
use tcCore\GroupQuestion;
use tcCore\GroupQuestionQuestion;
use tcCore\Lib\GroupQuestionQuestion\GroupQuestionQuestionManager;
use tcCore\MultipleChoiceQuestion;
use tcCore\Question;
use Tests\ScenarioLoader;
use Illuminate\Foundation\Testing\WithFaker;
use tcCore\Factories\FactoryTest;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\OpenQuestion;
use tcCore\TestQuestion;
use Tests\TestCase;

class FactoryQuestionGroupTest extends TestCase
{
    use WithFaker;

    protected $loadScenario = FactoryScenarioSchoolSimple::class;
    private mixed $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = ScenarioLoader::get('user');
    }

    /** @test */
    public function can_add_a_group_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountGroupQuestions = GroupQuestion::count();
        $testFactory = FactoryTest::create($this->user);

        $testFactory->addQuestions([
            FactoryQuestionGroup::create()
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());
        $this->assertEquals($startCountGroupQuestions + 1, GroupQuestion::count());
    }

    /** @test */
    public function can_add_group_question_with_correct_test_id()
    {
        $testFactory = FactoryTest::create($this->user);
        $testId = $testFactory->getTestId();

        $testFactory->addQuestions([
            FactoryQuestionGroup::create()
        ]);
        $testQuestionTestId = $testFactory
            ->getPropertyByName('questions')[0]
            ->getPropertyByName('questionProperties')['test_id'];

        $this->assertEquals($testId, $testQuestionTestId);
    }

    /** @test */
    public function cannot_add_a_custom_answer_to_a_group_question()
    {
        $this->expectExceptionMessage("Cannot add answers to group question.");
        $customAnswer = '<p>the answer is one</p>';

        $testFactory = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionGroup::create()->addAnswer(['answer' => $customAnswer])
        ]);
    }

    /**
     * @dataProvider GroupPropertiesProvider
     * @test
     */
    public function can_add_custom_properties_to_a_group_question(array $properties)
    {
        $startCountQuestions = TestQuestion::count();

        $testFactory = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionGroup::create()->setProperties($properties)
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());

        $testFactoryFirstQuestionProperties = $testFactory
            ->getPropertyByName('questions')[0]
            ->getPropertyByName('questionProperties');

        foreach ($properties as $key => $value) {
            $this->assertTrue(key_exists($key, $testFactoryFirstQuestionProperties), 'Array key does not exist in question properties array');
            $this->assertTrue($testFactoryFirstQuestionProperties[$key] == $value, 'Entered value: [ ' . $value . ' ], does not exist in question properties array at key [ ' . $key . ' ]');
            $this->assertTrue(in_array($value, $testFactoryFirstQuestionProperties, true), 'Entered value: [ ' . $value . ' ], does not exist in question properties array');
        }

    }

    public function GroupPropertiesProvider()
    {
        return [
            'question'        => [
                [
                    'question' => '<p>Arbitrary new question</p>',
                ]
            ],
            'all_or_nothing'  => [
                [
                    'all_or_nothing' => true,
                ]
            ],
            'add_to_database' => [
                [
                    'add_to_database' => false,
                ]
            ],
            'name'            => [
                [
                    'name' => 'New group title'
                ]
            ]
        ];
    }

    /** @test */
    public function can_add_a_open_short_question_to_a_group_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountGroupQuestions = GroupQuestion::count();
        $startCountOpenQuestions = OpenQuestion::count();

        FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionGroup::create()
                ->addQuestions([
                    FactoryQuestionOpenShort::create(),
                ])
        ]);

        $this->assertEquals($startCountQuestions + 1, TestQuestion::count());
        $this->assertEquals($startCountGroupQuestions + 1, GroupQuestion::count());
        $this->assertEquals($startCountOpenQuestions + 1, OpenQuestion::count());

        $lastAddedOpenQuestionId = OpenQuestion::orderByDesc('id')->first()->getKey();

        $this->assertEquals(
            GroupQuestionQuestion::whereQuestionId($lastAddedOpenQuestionId)->first()->group_question_id,
            GroupQuestion::orderByDesc('id')->first()->getKey()
        );

    }

    /** @test */
    public function can_add_multiple_sub_question_to_a_group_question()
    {
        $test = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionGroup::create()
                ->addQuestions([
                    FactoryQuestionOpenShort::create(),
                    FactoryQuestionMultipleChoice::create(),
                    FactoryQuestionRanking::create(),
                ])
        ])->getTestModel();

        $testQuestionQuery = TestQuestion::whereTestId($test->getKey());

        $this->assertEquals(
            1,
            $testQuestionQuery->count()
        );
        $this->assertEquals(
            'GroupQuestion',
            $testQuestionQuery->first()->question->type
        );

        $this->assertEquals(
            3,
            GroupQuestionQuestion::whereGroupQuestionId($testQuestionQuery->first()->question_id)->count()
        );

    }

    /** @test */
    public function can_add_custom_properties_to_a_sub_question()
    {
        $questionString = 'I am part of a group!';
        $test = FactoryTest::create($this->user)->addQuestions([
            FactoryQuestionGroup::create()
                ->addQuestions([
                    FactoryQuestionOpenLong::create()
                        ->setProperties(['question' => $questionString]),
                ]),
        ])->getTestModel();

        $this->assertEquals(
            $questionString,
            OpenQuestion::orderByDesc('id')->first()->getQuestionInstance()->question
        );
    }


    /** @test */
    public function can_add_a_multiple_choice_question_to_a_group_question()
    {
        $startCountQuestions = TestQuestion::count();
        $startCountGroupQuestions = GroupQuestion::count();
        $startCountOpenQuestions = OpenQuestion::count();

        FactoryTest::create($this->user)
            ->addQuestions(
                [
                    FactoryQuestionGroup::create()
                        ->addQuestions(
                            [
                                FactoryQuestionMultipleChoice::create()
                                    ->setProperties(['question' => '<p>Multiple choice sub question!</p>']),
                            ]
                        )
                ]
            );

        $lastAddedMultipleChoiceQuestion = MultipleChoiceQuestion::orderByDesc('id')->first();

        //main assertions:
        $this->assertGreaterThan(
            expected: 0,
            actual: $lastAddedMultipleChoiceQuestion->selectable_answers,
            message: 'Selectable answers is not greater than 0, so the multiple_choice_question was not properly created/saved'
        );
        $this->assertGreaterThan(
            expected: 0,
            actual  : $lastAddedMultipleChoiceQuestion->getQuestionInstance()->score,
            message : "Score is not greater that 0, so the question properties were not properly calculated and saved"
        );



        $this->assertEquals($startCountQuestions + 1, TestQuestion::count(), "Two test questions should have been created");
        $this->assertEquals($startCountGroupQuestions + 1, GroupQuestion::count());
        $this->assertEquals($startCountOpenQuestions + 1, MultipleChoiceQuestion::count(),
                            "Exactly one MultipleChoiceQuestion should have been created");
        $this->assertEquals(
            expected: GroupQuestion::orderByDesc('id')->first()->getKey(),
            actual: GroupQuestionQuestion::whereQuestionId($lastAddedMultipleChoiceQuestion->getKey())->first()->group_question_id
        );

    }
}
