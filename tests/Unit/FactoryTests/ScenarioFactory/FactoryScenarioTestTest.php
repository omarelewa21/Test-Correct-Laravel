<?php

namespace Tests\Unit\FactoryTests\ScenarioFactory;

use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithFaker;
use tcCore\Attachment;
use tcCore\BaseSubject;
use tcCore\EducationLevel;
use tcCore\Factories\FactoryBaseSubject;
use tcCore\Factories\FactorySchool;
use tcCore\Factories\FactorySchoolClass;
use tcCore\Factories\FactorySchoolLocation;
use tcCore\Factories\FactorySection;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\FactoryScenarios\FactoryScenarioTestBiologie;
use tcCore\FactoryScenarios\FactoryScenarioTestScheikunde;
use tcCore\FactoryScenarios\FactoryScenarioTestTestWithAllQuestionTypes;
use tcCore\FactoryScenarios\FactoryScenarioTestTestWithOpenShortQuestion;
use tcCore\FactoryScenarios\FactoryScenarioTestTestWithTwoQuestions;
use tcCore\Lib\Repositories\SchoolYearRepository;
use tcCore\OpenQuestion;
use tcCore\QuestionAttachment;
use tcCore\Teacher;
use tcCore\Test;
use tcCore\TestQuestion;
use tcCore\User;
use Tests\ScenarioLoader;
use Tests\TestCase;

class FactoryScenarioTestTest extends TestCase
{
    use WithFaker;

    private mixed $user;
    protected $loadScenario = FactoryScenarioSchoolSimple::class;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = ScenarioLoader::get('user');
    }

    /**
     * The school/school location are referenced from the passed user
     * @test
     */
    public function can_create_scenario_for_specific_user()
    {
//        $teacherUser = User::find(1500);

        $scenarioFactory = FactoryScenarioTestTestWithAllQuestionTypes::create('name', $this->user);

        $this->assertEquals($this->user->getKey(), $scenarioFactory->getTestModel()->author->getKey());
    }

    /** @test */
    public function can_create_scenario_one_of_all_questions()
    {
        $startCountTest = Test::count();
        $startCountTestQuestion = TestQuestion::count();

        $scenarioFactory = FactoryScenarioTestTestWithAllQuestionTypes::create(user: $this->user);

        $this->assertGreaterThan($startCountTest, Test::count());
        $this->assertGreaterThan($startCountTestQuestion, TestQuestion::count());
    }

    /** @test */
    public function scenario_with_all_questions_contains_attachments()
    {
        $startCountQuestionAttachments = QuestionAttachment::count();
        $startCountAttachments = Attachment::count();

        $scenarioFactory = FactoryScenarioTestTestWithAllQuestionTypes::create(user: $this->user);

        $this->assertEquals($startCountQuestionAttachments + 4, QuestionAttachment::count());
        $this->assertEquals($startCountAttachments + 4, Attachment::count());
    }

    /** @test */
    public function can_create_scenario_one_open_question()
    {
        $startCountTest = Test::count();
        $startCountTestOpenShort = OpenQuestion::count();

        FactoryScenarioTestTestWithOpenShortQuestion::create(user: $this->user);

        $this->assertEquals($startCountTest + 1, Test::count());
        $this->assertEquals($startCountTestOpenShort + 1, OpenQuestion::count());
    }

    /** @test */
    public function can_create_scenario_with_two_questions()
    {
        $startCountTest = Test::count();
        $startCountTestQuestions = TestQuestion::count();

        FactoryScenarioTestTestWithTwoQuestions::create(user: $this->user);

        $this->assertEquals($startCountTest + 1, Test::count());
        $this->assertEquals($startCountTestQuestions + 2, TestQuestion::count());
    }

    /** @test */
    public function can_create_test_scenario_and_return_test_model()
    {
        $startCountTest = Test::count();

        $testModel = FactoryScenarioTestTestWithAllQuestionTypes::createTest(user: $this->user);

        $this->assertInstanceOf('tcCore\Test', $testModel);
        $this->assertEquals($startCountTest + 1, Test::count());
    }

    /** @test */
    public function can_create_test_scenario_with_custom_test_name()
    {
        $startCountTest = Test::count();

        $testModel = FactoryScenarioTestTestWithAllQuestionTypes::createTest('Test for bug #1', user: $this->user);
        $testScenarioFactory = FactoryScenarioTestTestWithAllQuestionTypes::create('Test for bug #2',
            user: $this->user);

        $this->assertEquals('Test for bug #1', $testModel->name);
        $this->assertEquals('Test for bug #2', $testScenarioFactory->getTestModel()->name);
        $this->assertEquals($startCountTest + 2, Test::count());
    }

    /** @test */
    public function can_create_test_scenario_with_a_specific_subject_biologie()
    {
        $this->actingAs($this->user);
        $startCountTest = Test::count();

        $sectionFactory = FactorySection::create($this->user->schoolLocation, 'Biologie');

        $sectionFactory->addSubject(
            BaseSubject::where('name', 'Biologie')->first(),
            'Biologie',
            'bio'
        );

        FactorySchoolClass::create(
            SchoolYearRepository::getCurrentSchoolYear(),
            EducationLevel::first()->getKey(),
            'Klas biologie'
        )->addTeacher(
            $this->user,
            $sectionFactory->section->subjects()->first()
        );

        $testModel = FactoryScenarioTestBiologie::createTest(user: $this->user);

        $this->assertEquals($startCountTest + 1, Test::count());
        $this->assertEquals("Biologie", $testModel->subject->name);
    }

    /** @test */
    public function can_create_test_scenario_with_a_specific_subject_scheikunde()
    {
        $startCountTest = Test::count();

        $this->actingAs($this->user);
        $startCountTest = Test::count();

        $sectionFactory = FactorySection::create($this->user->schoolLocation, 'Scheikunde');

        $sectionFactory->addSubject(
            BaseSubject::where('name', 'Scheikunde')->first(),
            'Scheikunde',
            'schei'
        );

            FactorySchoolClass::create(
                SchoolYearRepository::getCurrentSchoolYear(),
                EducationLevel::first()->getKey(),
                'Klas Scheikunde'
            )->addTeacher(
                $this->user,
                $sectionFactory->section->subjects()->first()
            );


        $testModel = FactoryScenarioTestScheikunde::createTest(user: $this->user);

        $this->assertEquals($startCountTest + 1, Test::count());
        $this->assertEquals("Scheikunde", $testModel->subject->name);
    }
}
