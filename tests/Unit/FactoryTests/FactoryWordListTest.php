<?php

namespace Tests\Unit\FactoryTests;

use Illuminate\Foundation\Testing\WithFaker;
use tcCore\Factories\FactoryWord;
use tcCore\Factories\FactoryWordList;
use tcCore\FactoryScenarios\FactoryScenarioSchoolSimple;
use tcCore\Http\Enums\WordType;
use tcCore\User;
use tcCore\Word;
use tcCore\WordList;
use Tests\ScenarioLoader;
use Tests\TestCase;

class FactoryWordListTest extends TestCase
{
    use WithFaker;

    protected $loadScenario = FactoryScenarioSchoolSimple::class;
    private User $teacherOne;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->teacherOne = ScenarioLoader::get('teachers')->first();
    }

    /** @test */
    public function can_create_word_list()
    {
        $this->assertDatabaseEmpty(WordList::class);
        FactoryWordList::create($this->teacherOne);
        $this->assertDatabaseCount(WordList::class, 1);
    }

    /** @test */
    public function can_add_rows_with_random_words_when_creating_word_list()
    {
        $this->assertDatabaseEmpty(Word::class);

        $wordList = FactoryWordList::create($this->teacherOne)
            ->addRow()
            ->wordList;

        $this->assertDatabaseCount(Word::class, 2);
        $this->assertEquals(1, $wordList->rows()->count());
        $this->assertEquals(2, $wordList->words()->count());
    }

    /** @test
     * @throws \Exception
     */
    public function can_add_rows_with_given_words_when_creating_word_list()
    {
        $subjectWord = FactoryWord::create($this->teacherOne, ['type' => WordType::SUBJECT])->word;
        $translation = FactoryWord::create($this->teacherOne, ['type' => WordType::TRANSLATION])
            ->linkToSubjectWord($subjectWord)
            ->word;

        $wordListFactory = FactoryWordList::create($this->teacherOne);

        $this->assertDatabaseCount(Word::class, 2);
        $this->assertEquals(0, $wordListFactory->wordList->rows()->count());
        $this->assertEquals(0, $wordListFactory->wordList->words()->count());

        $wordList = $wordListFactory->addRow([$subjectWord])->wordList;


        $this->assertDatabaseCount(Word::class, 2);
        $this->assertEquals(1, $wordList->rows(true)->count());
        $this->assertEquals(2, $wordList->words()->count());
        $this->assertEquals(
            $subjectWord->getKey(),
            $wordList->words()->where('type', WordType::SUBJECT)->first()->getKey()
        );
        $this->assertEquals(
            $translation->getKey(),
            $wordList->words()->whereNot('type', WordType::SUBJECT)->first()->getKey()
        );
    }

    /** @test
     * @throws \Exception
     */
    public function can_add_rows_with_one_given_subject_word_when_creating_word_list_but_it_creates_a_homie()
    {
        $subjectWord = FactoryWord::create($this->teacherOne, ['type' => WordType::SUBJECT])->word;

        $wordListFactory = FactoryWordList::create($this->teacherOne);

        $this->assertDatabaseCount(Word::class, 1);
        $this->assertEquals(0, $wordListFactory->wordList->rows()->count());
        $this->assertEquals(0, $wordListFactory->wordList->words()->count());

        $wordList = $wordListFactory->addRow([$subjectWord])->wordList;

        $this->assertDatabaseCount(Word::class, 2);
        $this->assertEquals(1, $wordList->rows(true)->count());
        $this->assertEquals(2, $wordList->words()->count());

        $this->assertEquals(
            $subjectWord->getKey(),
            $wordList->words()->where('type', WordType::SUBJECT)->first()->getKey()
        );
    }

    /** @test
     * @throws \Exception
     */
    public function can_add_rows_with_one_given_non_subject_word_when_creating_word_list_but_it_creates_a_homie()
    {
        $translation = FactoryWord::create($this->teacherOne, ['type' => WordType::TRANSLATION])->word;

        $wordListFactory = FactoryWordList::create($this->teacherOne);

        $this->assertDatabaseCount(Word::class, 1);
        $this->assertEquals(0, $wordListFactory->wordList->rows()->count());
        $this->assertEquals(0, $wordListFactory->wordList->words()->count());

        $wordList = $wordListFactory->addRow([$translation])->wordList;

        $this->assertDatabaseCount(Word::class, 2);
        $this->assertEquals(1, $wordList->rows(true)->count());
        $this->assertEquals(2, $wordList->words()->count());

        $this->assertEquals(
            $translation->getKey(),
            $wordList->words()->where('type', WordType::TRANSLATION)->first()->getKey()
        );
    }

    /** @test
     * @throws \Exception
     */
    public function can_add_a_specified_number_of_rows_to_a_list()
    {
        $this->assertDatabaseCount(Word::class, 0);
        $numberOfRows = 10;
        $wordList = FactoryWordList::create($this->teacherOne)
            ->addRows($numberOfRows)
            ->wordList;

        $this->assertDatabaseCount(Word::class, $numberOfRows * 2);
        $this->assertEquals(
            $numberOfRows,
            $wordList->rows(true)->count()
        );
        $this->assertEquals(
            $numberOfRows * 2,
            $wordList->words()->count()
        );
    }

    /** @test
     * @throws \Exception
     */
    public function can_add_a_specified_number_of_rows_to_a_list_with_multiple_types_per_row()
    {
        $this->assertDatabaseCount(Word::class, 0);
        $numberOfRows = 10;
        $typesPerRow = 3;

        $wordList = FactoryWordList::create($this->teacherOne)
            ->addRows($numberOfRows, $typesPerRow)
            ->wordList;

        $this->assertDatabaseCount(Word::class, $numberOfRows * $typesPerRow);
        $this->assertEquals(
            $numberOfRows,
            $wordList->rows(true)->count()
        );
        $this->assertEquals(
            $numberOfRows * $typesPerRow,
            $wordList->words()->count()
        );
        $this->assertEquals(
            $typesPerRow,
            Word::distinct('type')->count('type')
        );
    }
}