<?php

namespace Tests\Unit;

use Carbon\Carbon;
use Carbon\CarbonInterval;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Str;
use tcCore\EducationLevel;
use tcCore\Http\Helpers\DemoHelper;
use tcCore\Http\Helpers\SvgHelper;
use tcCore\Lib\Repositories\SchoolYearRepository;
use tcCore\OnboardingWizard;
use tcCore\OnboardingWizardStep;
use tcCore\OnboardingWizardUserStep;
use tcCore\Period;
use tcCore\SchoolClass;
use tcCore\SchoolLocation;
use tcCore\Section;
use tcCore\Subject;
use tcCore\Teacher;
use tcCore\Test;
use tcCore\TestTake;
use tcCore\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\Http\Helpers\DemoHelperTestHelper;
use Tests\Unit\Http\Helpers\OnboardingTestHelper;
use Illuminate\Support\Facades\Storage;

class SvgHelperTest extends TestCase
{
    const BLACK_PIXEL = 'data: image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=';
    private $disk;

    /**
     * @TODO
     * Viewbox read/write
     * question layer read
     * answer layer read
     *
     */

    /**
     * @return false|string
     */
    private function getBlackPixelAsBinary()
    {
//        return base64_decode(explode(',', self::BLACK_PIXEL)[1]);
        return UploadedFile::fake()->image('black_pixel.png');
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Storage::fake(SvgHelper::DISK);
        $this->disk = Storage::disk(SvgHelper::DISK);
    }

    /** @test */
    public function it_should_create_a_folder_with_structure()
    {
        $uuid = '525123be-1539-45eb-afa1-c3ce78099051';

        (new SvgHelper($uuid));
        $this->disk->assertExists($uuid);
        $this->disk->assertExists(sprintf('%s/question', $uuid));
        $this->disk->assertExists(sprintf('%s/answer', $uuid));
    }

    /** @test */
    public function it_should_create_a_stub_svg_file()
    {
        $uuid = '525123be-1539-45eb-afa1-c3ce78099051';
        (new SvgHelper($uuid));
        $this->disk->assertExists(sprintf('%s/%s', $uuid, SvgHelper::SVG_FILENAME));
        $this->disk->exists(sprintf('%s/%s', $uuid, SvgHelper::SVG_FILENAME));
    }

    /** @test */
    public function it_can_return_the_contents_of_the_svg()
    {
        $this->assertXmlStringEqualsXmlString(<<<XML
<svg viewBox="0 0 0 0"
     class="w-full h-full"
     xmlns="http://www.w3.org/2000/svg"
     style="--cursor-type-locked:var(--cursor-crosshair); --cursor-type-draggable:var(--cursor-crosshair);"
>
    <g  id="svg-preview-group" stroke="var(--all-BlueGrey)" stroke-width="1"></g>
    <g id="svg-question-group" ></g>
    <g id="svg-answer-group" ></g>
</svg>
XML
            ,
            (new SvgHelper('adcac1fb-57e3-40a0-ba4a-f895e23c84ea'))->getSvg()
        );
    }

    /** @test */
    public function it_can_update_insert_the_answer_layer()
    {
        $answerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"/>';
        $newAnswerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="blue"/>';
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');

        $svgHelper->updateAnswerLayer($answerLayer);
        $this->assertStringContainsString($answerLayer, $svgHelper->getSvg());

        $svgHelper->updateAnswerLayer($newAnswerLayer);
        $this->assertStringContainsString($newAnswerLayer, $svgHelper->getSvg());
        $this->assertStringNotContainsString($answerLayer, $svgHelper->getSvg());
    }

    /** @test */
    public function it_can_update_insert_the_question_layer()
    {
        $answerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"/>';
        $newAnswerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="blue"/>';
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');

        $svgHelper->updateQuestionLayer($answerLayer);
        $this->assertStringContainsString($answerLayer, $svgHelper->getSvg());

        $svgHelper->updateQuestionLayer($newAnswerLayer);
        $this->assertStringContainsString($newAnswerLayer, $svgHelper->getSvg());
        $this->assertStringNotContainsString($answerLayer, $svgHelper->getSvg());
    }

    /** @test */
    public function when_initiated_the_correction_model_png_should_be_an_empty_pixel()
    {
        $uuid = '02664bae-3be2-463d-bb28-a1fbf4611038';
        $svgHelper = new SvgHelper($uuid);
        $this->disk->exists(sprintf('%s/%s', $uuid, SvgHelper::CORRECTION_MODEL_PNG_FILENAME));
        $this->assertEquals(
            base64_decode(SvgHelper::TRANSPARANT_PIXEL),
            $svgHelper->getCorrectionModelPNG()
        );
    }

    /** @test */
    public function when_initiated_the_question_png_should_be_an_empty_pixel()
    {
        $uuid = '02664bae-3be2-463d-bb28-a1fbf4611038';
        $svgHelper = new SvgHelper($uuid);
        $this->disk->exists(sprintf('%s/%s', $uuid, SvgHelper::QUESTION_PNG_FILENAME));
        $this->assertEquals(
            base64_decode(SvgHelper::TRANSPARANT_PIXEL),
            $svgHelper->getQuestionModelPNG()
        );
    }

    /** @test */
    public function it_can_update_the_correction_model_png()
    {
        $svgHelper = (new SvgHelper('1d5906a8-0eee-4078-8d78-44d402bb66a4'));
        $this->assertNotEquals(
            base64_decode(self::BLACK_PIXEL),
            $svgHelper->getCorrectionModelPNG()
        );

        $svgHelper->updateCorrectionModelPNG(self::BLACK_PIXEL);
        $this->assertEquals(
            base64_decode(self::BLACK_PIXEL),
            $svgHelper->getCorrectionModelPNG()
        );
    }

    /** @test */
    public function it_can_update_the_question_png()
    {
        $svgHelper = (new SvgHelper('9825cdd0-f5a9-4dee-8143-f549603631ec'));
        $this->assertNotEquals(
            base64_decode(self::BLACK_PIXEL),
            $svgHelper->getQuestionModelPNG()
        );

        $svgHelper->updateQuestionPNG(self::BLACK_PIXEL);
        $this->assertEquals(
            base64_decode(self::BLACK_PIXEL),
            $svgHelper->getQuestionModelPNG()
        );
    }

    /** @test */
    public function it_can_add_an_image_to_the_question_layer_and_render_the_svg_with_data_url()
    {
        $uuid = 'e25397bb-e8c2-4835-969b-fa6bd88ff78c';
        $svgHelper = new SvgHelper($uuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addQuestionImage($identifier, $this->getBlackPixelAsBinary());
        $this->assertNotEmpty($identifier);

        $this->disk->exists(
            sprintf('%s/question/%s', $uuid, $identifier)
        );

        $svgHelper->updateQuestionLayer(
            sprintf(
                '<image identifier="%s"/>',
                $identifier
            )
        );
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvg());

        $imageNode = collect($doc->getElementsByTagName('image'))->first(function ($node) use ($identifier) {
            return $node->getAttribute('identifier') == $identifier;
        });

        $this->assertStringContainsString(
            'base64',
            $imageNode->getAttribute('href')
        );
    }

    /** @test */
    public function it_can_add_an_image_to_the_answer_layer_and_render_the_svg_with_data_url()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $svgHelper = new SvgHelper($uuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addAnswerImage($identifier, $this->getBlackPixelAsBinary());
        $this->assertNotEmpty($identifier);

        $this->disk->exists(
            sprintf('%s/answer/%s', $uuid, $identifier)
        );


        $svgHelper->updateAnswerLayer(
            sprintf(
                '<image identifier="%s"/>',
                $identifier
            )
        );
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvg());

        $imageNode = collect($doc->getElementsByTagName('image'))->first(function ($node) use ($identifier) {
            return $node->getAttribute('identifier') == $identifier;
        });

        $this->assertStringContainsString(
            'base64',
            $imageNode->getAttribute('href')
        );
    }

    /** @test */
    public function it_can_add_an_image_to_the_answer_layer_in_base_64_encoded_format_and_render_the_svg_with_data_url()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $svgHelper = new SvgHelper($uuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addAnswerImage($identifier, $this->getBlackPixelAsBinary());
        $this->assertNotEmpty($identifier);
        $this->disk->exists(
            sprintf('%s/answer/%s', $uuid, $identifier)
        );

        $svgHelper->updateAnswerLayer(
            base64_encode(
                sprintf(
                    '<image identifier="%s"/>',
                    $identifier
                )
            )
        );
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvg());

        $imageNode = collect($doc->getElementsByTagName('image'))->first(function ($node) use ($identifier) {
            return $node->getAttribute('identifier') == $identifier;
        });

        $this->assertStringContainsString(
            'base64',
            $imageNode->getAttribute('href')
        );
    }


    /** @test */
    public function it_can_add_an_image_to_the_answer_layer_and_render_the_svg_with_normal_url()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $svgHelper = new SvgHelper($uuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addAnswerImage($identifier, $this->getBlackPixelAsBinary());

        $svgHelper->updateAnswerLayer(
            base64_encode(
                sprintf(
                    '<image identifier="%s"/>',
                    $identifier
                )
            )
        );
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvgWithUrls());

        $imageNode = collect($doc->getElementsByTagName('image'))->first(function ($node) use ($identifier) {
            return $node->getAttribute('identifier') == $identifier;
        });

        $this->assertEquals(
            route('drawing-question.background-answer-svg', ['drawingQuestion' => $uuid, 'identifier' => $identifier]),
            $imageNode->getAttribute('href')
        );
    }

    /** @test */
    public function it_can_add_an_image_to_the_question_layer_and_render_the_svg_with_normal_url()
    {
        $uuid = 'ec1980fd-5f01-4425-b505-50b293d56dc3';
        $svgHelper = new SvgHelper($uuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addQuestionImage($identifier, $this->getBlackPixelAsBinary());

        $svgHelper->updateQuestionLayer(
            base64_encode(
                sprintf(
                    '<image identifier="%s"/>',
                    $identifier
                )
            )
        );
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvgWithUrls());

        $imageNode = collect($doc->getElementsByTagName('image'))->first(function ($node) use ($identifier) {
            return $node->getAttribute('identifier') == $identifier;
        });

        $this->assertEquals(
            route('drawing-question.background-question-svg', ['drawingQuestion' => $uuid, 'identifier' => $identifier]),
            $imageNode->getAttribute('href')
        );
    }

    /** @test */
    public function it_can_update_the_view_box_attribute_on_the_svg()
    {
        $svgHelper = new SvgHelper('9dbd6346-f9b3-479b-ae25-758f3e1711ee');
        $doc = new \DOMDocument();
        $doc->loadXML($svgHelper->getSvg());
        $this->assertEquals(
            "0 0 0 0",
            $doc->getElementsByTagName('svg')->item(0)->getAttribute('viewBox')
        );


//        $svgHelper->updateViewBox('100 20 10 10');


    }

    /** @test */
    public function it_can_rename_a_directory_to_a_different_uuid()
    {
        $currentUuid = '9dbd6346-f9b3-479b-ae25-758f3e1711ee';
        $svgHelper = new SvgHelper($currentUuid);

        $this->disk->assertExists($currentUuid);

        $newUuid = (string)Str::uuid();
        $svgHelper->rename($newUuid);

        $this->disk->assertExists($newUuid);
        $this->disk->assertMissing($currentUuid);
    }

    /** @test */
    public function it_can_add_an_image_to_the_answer_layer_in_base_64_encoded_format_to_a_renamed_directory()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $newUuid = (string)Str::uuid();

        $svgHelper = new SvgHelper($uuid);

        $svgHelper->rename($newUuid);

        $identifier = (string)Str::uuid();
        $svgHelper->addAnswerImage($identifier, $this->getBlackPixelAsBinary());
        $this->assertNotEmpty($identifier);

        $this->disk->exists(
            sprintf('%s/answer/%s', $newUuid, $identifier)
        );

    }

    /**
     * @test
     * @expect \Exception
     */
    public function when_renaming_a_svg_without_valid_new_uuid_it_should_throw_an_exception()
    {
        $this->expectException(\Exception::class);

        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $newUuid = '';

        $svgHelper = new SvgHelper($uuid);

        $svgHelper->rename($newUuid);
    }

    /**
     * @test
     */
    public function it_can_set_the_viewbox_attribute_on_svg()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $svgHelper = new SvgHelper($uuid);
        $viewBox = [
            "x"      => 2,
            "y"      => 3,
            "width"  => 307,
            "height" => 307,
        ];

        $svgHelper->setViewBox($viewBox);

        $this->assertStringContainsString('viewBox="2 3 307 307"', $svgHelper->getSvg());
    }

    /**
     * @test
     */
    public function it_can_get_the_viewbox_attribute_on_svg()
    {
        $uuid = '3684d068-5215-4fd8-a030-b7c66aa58e81';
        $svgHelper = new SvgHelper($uuid);
        $viewBox = [
            "x"      => 2,
            "y"      => 3,
            "width"  => 307,
            "height" => 307,
        ];

        $svgHelper->setViewBox($viewBox);
        $retrievedViewBox = $svgHelper->getViewBox();


        $this->assertStringContainsString('viewBox="2 3 307 307"', $svgHelper->getSvg());
        $this->assertEquals($retrievedViewBox, $svgHelper->makeViewBoxString($viewBox));
        $this->assertEquals($svgHelper->makeViewBoxArray($retrievedViewBox), $viewBox);
    }

    /** @test */
    public function it_can_return_an_array_with_height_and_width()
    {
        $uuid = '2fc81d55-2fc6-4885-97d2-da4d6002c4ef';
        $svgHelper = new SvgHelper($uuid);
        $viewBox = [
            "x"      => 2,
            "y"      => 3,
            "width"  => 307,
            "height" => 207,
        ];

        $svgHelper->setViewBox($viewBox);
        $this->assertEquals(['w' => 307, 'h' => 207], $svgHelper->getArrayWidthAndHeight());
    }

    /**
     * @test
     */
    public function it_can_retrieve_the_answer_layer_from_the_svg()
    {
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');
        $answerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="blue"></circle>';
        $questionLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"></circle>';

        $svgHelper->updateAnswerLayer($answerLayer);
        $svgHelper->updateQuestionLayer($questionLayer);

        $this->assertEquals($answerLayer, $svgHelper->getAnswerLayerFromSVG());
        $this->assertNotEquals($questionLayer, $svgHelper->getAnswerLayerFromSVG());
    }

    /**
     * @test
     */
    public function it_can_retrieve_the_question_layer_from_the_svg()
    {
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');
        $answerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="blue"></circle>';
        $questionLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"></circle>';

        $svgHelper->updateAnswerLayer($answerLayer);
        $svgHelper->updateQuestionLayer($questionLayer);

        $this->assertEquals($questionLayer, $svgHelper->getQuestionLayerFromSVG());
        $this->assertNotEquals($answerLayer, $svgHelper->getQuestionLayerFromSVG());
    }

    /**
     * @test
     */
    public function it_can_retrieve_the_answer_layer_from_the_svg_as_base64_string()
    {
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');
        $answerLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"></circle>';

        $svgHelper->updateAnswerLayer($answerLayer);

        $this->assertEquals(
            $answerLayer,
            base64_decode($svgHelper->getAnswerLayerFromSVG(true))
        );
    }

    /**
     * @test
     */
    public function it_can_retrieve_the_question_layer_from_the_svg_as_base64_string()
    {
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');
        $questionLayer = '<circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"></circle>';

        $svgHelper->updateQuestionLayer($questionLayer);

        $this->assertEquals(
            $questionLayer,
            base64_decode($svgHelper->getQuestionLayerFromSVG(true))
        );
    }

    /**
     * @test
     */
    public function it_can_retrieve_an_empty_layer_from_the_svg_as_base64_string_without_breaking()
    {
        $svgHelper = new SvgHelper('5eaf249f-a08a-42bc-9c7c-6267d9c329a0');
        $emptyBase64String = base64_encode('');

        $this->assertEquals($emptyBase64String, $svgHelper->getQuestionLayerFromSVG());
        $this->assertEmpty($svgHelper->getQuestionLayerFromSVG(true));
    }
}
