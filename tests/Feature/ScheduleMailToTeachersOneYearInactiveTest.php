<?php

namespace Tests\Feature;

use Carbon\Carbon;
use \Illuminate\Support\Facades\Config;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use tcCore\Console\Commands\ScheduleMailToTeachersOneYearInactive;
use tcCore\Factories\FactorySchool;
use tcCore\Factories\FactorySchoolLocation;
use tcCore\Factories\FactoryUser;
use tcCore\Lib\User\Factory;
use tcCore\LoginLog;
use tcCore\School;
use tcCore\SchoolLocation;
use tcCore\User;
use Tests\TestCase;

class ScheduleMailToTeachersOneYearInactiveTest extends TestCase
{

    private SchoolLocation $schoolLocationActive;
    private SchoolLocation $schoolLocationInActive;
    private Carbon $createdAt7MonthsAgo;
    private Carbon $createdAt13MonthsAgo;
    private Carbon $createdAt23MonthsAgo;
    private Carbon $createdAt25MonthsAgo;
    private array $users;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->createdAt7MonthsAgo = \Carbon\Carbon::now()->subMonths(7);
        $this->createdAt13MonthsAgo = \Carbon\Carbon::now()->subMonths(13);
        $this->createdAt23MonthsAgo = \Carbon\Carbon::now()->subMonths(23);
        $this->createdAt25MonthsAgo = \Carbon\Carbon::now()->subMonths(25);

        $this->schoolLocationActive = FactorySchoolLocation::create(
            FactorySchool::create('S100')->school,
            'SL101',
            [
                'activated'=>true
            ]
        )->schoolLocation;

        $this->schoolLocationInActive = FactorySchoolLocation::create(
            FactorySchool::create('S100')->school,
            'SL101',
            [
                'activated' =>false
            ]
        )->schoolLocation;

    }

    public function test_teacher_created_seven_months_ago_last_login_seven_months_ago_active_school_true()
    {
        $user = FactoryUser::createTeacher($this->schoolLocationActive,false,[
            'created_at'=>$this->createdAt7MonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->createdAt7MonthsAgo;
        $loginLog->save();
        $userList=[];
        foreach((new ScheduleMailToTeachersOneYearInactive())->getListOfInactiveTeachers() as $user){
            $userList=$userList+[$user->id => $user->id];
        }

        $this->assertNotContains($user->id,$userList);
    }


    public function test_teacher_created_thirteen_months_ago_last_login_seven_months_ago_active_school_true()
    {
        $user = FactoryUser::createTeacher($this->schoolLocationActive,false,[
            'created_at'=>$this->createdAt13MonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->createdAt7MonthsAgo;
        $loginLog->save();
        $userList=[];
        foreach((new ScheduleMailToTeachersOneYearInactive())->getListOfInactiveTeachers() as $user){
            $userList=$userList+[$user->id => $user->id];
        }

        $this->assertNotContains($user->id,$userList);
    }

    public function test_teacher_created_thirteen_months_ago_last_login_thirteen_months_ago_active_school_true()
    {
        $user = FactoryUser::createTeacher($this->schoolLocationActive,false,[
            'created_at'=>$this->createdAt13MonthsAgo,
        ])->user;

        $loginLog = LoginLog::create(
            ['user_id' => $user->getKey()]
        );
        $loginLog->created_at = $this->createdAt13MonthsAgo;
        $loginLog->save();

        $this->assertContains($user->id,(new ScheduleMailToTeachersOneYearInactive())->getListOfInactiveTeachers());
    }
}

