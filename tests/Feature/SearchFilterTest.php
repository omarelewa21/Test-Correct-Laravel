<?php

use Illuminate\Contracts\Debug\ExceptionHandler;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Hash;
use tcCore\Exceptions\Handler;
use tcCore\User;
use tcCore\SearchFilter;
use Tests\TestCase;

class SearchFilterTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        SearchFilter::all()->each->delete();
    }

    /** @test */
    public function a_user_can_store_a_search_filter()
    {
        $this->assertEquals(0, SearchFilter::count());
        $response = $this->post(
            '/search_filter', $this->getValidAttributes()

        )->assertSuccessful();
        $this->assertEquals(1, SearchFilter::count());
        $searchfilter = SearchFilter::first();
        $this->assertEquals('new filter', $searchfilter->name);
        // it should be active once created;
        $this->assertEquals(1, $searchfilter->active);
        $this->assertNotEmpty($searchfilter->uuid);
    }

    /** @test */
    public function a_new_search_field_must_have_a_name()
    {
        $attr = $this->getValidAttributes();
        unset($attr['name']);
        $response = $this->post(
            '/search_filter', $attr

        )->assertStatus(422);
        $this->assertEquals('The name field is required.', $response->decodeResponseJson()['errors']['name'][0]);
    }


    /** @test */
    public function a_user_can_get_a_search_filter_list_for_a_given_key()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filters = factory(SearchFilter::class, 10)->create(['user_id' => $user->id,
            'key' => $key]);
        $response = $this->get(
            static::authTeacherOneGetRequest(
                'search_filter/itembank_toetsen',
                []
            )
        )->assertStatus(200);
        $this->assertEquals(10, count($response->decodeResponseJson()));
    }


    /** @test */
    public function a_user_can_get_his_own_search_filter_list_for_a_given_key()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filters = factory(SearchFilter::class, 10)->create(['user_id' => $user->id,
            'key' => $key]);
        $filters = factory(SearchFilter::class, 10)->create(['key' => $key]);
        $response = $this->get(
            static::authTeacherOneGetRequest(
                'search_filter/itembank_toetsen',
                []
            )
        )->assertStatus(200);
        $this->assertEquals(10, count($response->decodeResponseJson()));
        $this->assertEquals('itembank_toetsen', $response->decodeResponseJson()[0]['key']);
    }

    /** @test */
    public function a_user_can_get_right_search_filter_list_for_a_given_key()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $key2 = 'iets_anders';
        $filters = factory(SearchFilter::class, 10)->create(['user_id' => $user->id,
            'key' => $key]);
        $filters = factory(SearchFilter::class, 10)->create(['user_id' => $user->id,
            'key' => $key2]);
        $response = $this->get(
            static::authTeacherOneGetRequest(
                'search_filter/itembank_toetsen',
                []
            )
        )->assertStatus(200);
        $this->assertEquals(10, count($response->decodeResponseJson()));
    }

    /** @test */
    public function a_user_cannot_get_a_search_filter_list_without_a_given_key()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filters = factory(SearchFilter::class, 10)->create(['user_id' => $user->id,
            'key' => $key]);
        $response = $this->get(
            static::authTeacherOneGetRequest(
                'search_filter/',
                []
            )
        )->assertStatus(200);
        $this->assertEquals(0, count($response->decodeResponseJson()));
    }

    /** @test */
    public function a_user_can_update_a_search_filter()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filter = factory(SearchFilter::class)->create(['user_id' => $user->id,
            'key' => $key]);
        $response = $this->put(
            '/search_filter/' . $filter->uuid, $this->getValidAttributes()
        )->assertSuccessful();
        $searchfilter = SearchFilter::whereUuid($filter->uuid)->first();
        $this->assertEquals('new filter', $searchfilter->name);
    }

    /** @test */

    public function a_user_can_delete_a_search_filter()
    {
        $user = \tcCore\User::where('username', '=', static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filter = factory(SearchFilter::class)->create(['user_id' => $user->id,
            'key' => $key]);
        $response = $this->delete(
            '/search_filter/' . $filter->uuid, $this->getValidAttributes()
        )->assertSuccessful();
        $searchfilter = SearchFilter::whereUuid($filter->uuid)->first();
        $this->assertNull($searchfilter);
    }

    /** @test */
    public function a_user_can_set_a_search_filter_active(){
        $user = \tcCore\User::where('username','=',static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filters = factory(SearchFilter::class,10)->create([    'user_id'=>$user->id,
                                                                'key'=> $key]);
        $response = $this->put(
                'search_filter/'.$filters[3]->uuid.'/set_active',
                static::getTeacherOneAuthRequestData()
        )->assertStatus(200);
        $filter = SearchFilter::where('user_id',$user->id)->where('key',$key)->where('active',true)->first();
        $this->assertEquals($filters[3]->uuid, $filter->uuid);
        $activeFilters = SearchFilter::where('user_id',$user->id)->where('key',$key)->where('active',true)->get();
        $this->assertEquals(1, count($activeFilters));
    }

    /** @test */
    public function a_user_can_switch_a_search_filter_active(){
        $user = \tcCore\User::where('username','=',static::USER_TEACHER)->get()->first();
        $key = 'itembank_toetsen';
        $filters = factory(SearchFilter::class,10)->create([    'user_id'=>$user->id,
                                                                'key'=> $key]);
        $response = $this->put(
                'search_filter/'.$filters[3]->uuid.'/set_active',
                static::getTeacherOneAuthRequestData()
        )->assertStatus(200);
        $response = $this->put(
                'search_filter/'.$filters[5]->uuid.'/set_active',
                static::getTeacherOneAuthRequestData()
        )->assertStatus(200);
        $filter = SearchFilter::where('user_id',$user->id)->where('key',$key)->where('active',true)->first();
        $this->assertEquals($filters[5]->uuid, $filter->uuid);
        $activeFilters = SearchFilter::where('user_id',$user->id)->where('key',$key)->where('active',true)->get();
        $this->assertEquals(1, count($activeFilters));
    }

    /** @test */

    public function a_user_can_store_a_cached_search_filter(){
        $this->assertEquals(0, SearchFilter::count());
        $attributes = $this->getValidAttributes();
        $attributes['cached_filter'] = true;
        $response = $this->post(
            '/search_filter', $attributes

        )->assertSuccessful();
        $this->assertEquals(1, SearchFilter::count());
        $searchfilter = SearchFilter::first();
        $this->assertEquals(1, $searchfilter->cached_filter);
    }

    /** @test */
    public function there_can_only_be_one_cached_search_filter(){
        $this->assertEquals(0, SearchFilter::count());
        $attributes = $this->getValidAttributes();
        $attributes['cached_filter'] = true;
        $response = $this->post(
            '/search_filter', $attributes

        )->assertSuccessful();
        $response = $this->post(
            '/search_filter', $attributes

        )->assertSuccessful();
        $this->assertEquals(1, SearchFilter::count());
        $searchfilters = SearchFilter::where('cached_filter',true)->get();
        $this->assertEquals(1, $searchfilters->count());
    }


    private function getValidAttributes($overrides = [])
    {
        return static::getTeacherOneAuthRequestData(array_merge([
            'name' => 'new filter',
            'filters' => json_encode(['name' => 'iets', 'subject' => 'anders']),
            'key' => 'itembank_toetsen',
        ], $overrides));
    }

}
