<?php

namespace Tests\Feature;

use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use tcCore\OnboardingWizard;
use tcCore\OnboardingWizardStep;
use tcCore\OnboardingWizardUserState;
use tcCore\OnboardingWizardUserStep;
use tcCore\Test;
use tcCore\User;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use Tests\Unit\Http\Helpers\OnboardingTestHelper;

class OnboardingControllerTest extends TestCase
{
    use DatabaseTransactions;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        OnboardingWizard::query()->truncate();
        OnboardingWizardStep::query()->truncate();
        OnboardingWizardUserState::query()->truncate();
        OnboardingWizardUserStep::query()->truncate();
    }

    /** @test */
    public function onboarding_a_user_should_be_able_to_register_a_step_as_seen()
    {
        $helper = (new OnboardingTestHelper());
        $obj = $helper->createNewWizardWithSteps();

        $response = $this->post(
            route('onboarding.register_userstep'),
            static::getTeacherOneAuthRequestData([
                'onboarding_wizard_step_id' => $obj->steps[0],
            ])
        );
        $response->assertStatus(200);

        $user = User::where('username', self::USER_TEACHER)->first();

        $done = $helper->countDoneStepsForUser($user);

        $this->assertTrue($done === 1);
    }

    /** @test */
    public function onboarding_a_user_should_be_able_to_register_a_step_as_seen1()
    {
        $helper = (new OnboardingTestHelper());
        $obj = $helper->createNewWizardWithSteps();


        $user = User::where('username', self::USER_TEACHER)->first();
        $done = $helper->countDoneStepsForUser($user);

        $this->assertTrue($done === 0);

        $response = $this->post(
            route('onboarding.register_userstep'),
            static::getTeacherOneAuthRequestData([
                'onboarding_wizard_step_id' => $obj->steps[1],
            ])
        );

        $response = $this->post(
            route('onboarding.register_userstep'),
            static::getTeacherOneAuthRequestData([
                'onboarding_wizard_step_id' => $obj->steps[2],
            ])
        );

        $response->assertStatus(200);

        $response = $this->get(
            $this->getUrlWithAuthCredentials(route('onboarding.show_steps_for_user', ['user' => $user->getKey()]), static::getTeacherOneAuthRequestData([]))
        );

        $this->assertEquals(2, $response->decodeResponseJson()['count_sub_steps_done']);
    }

    /** @test */
    public function onboarding_teacher_one_should_get_a_full_list_of_steps()
    {
        $helper = (new OnboardingTestHelper());
        $obj = $helper->createNewWizardWithSteps();

        $user = User::where('username', self::USER_TEACHER)->first();

        $response = $this->get(
            $this->getUrlWithAuthCredentials(route('onboarding.show_steps_for_user', ['user' => $user->getKey()]), static::getTeacherOneAuthRequestData([]))
        );
        $response->assertStatus(200);
        $data = $response->decodeResponseJson()['steps'];

        $this->assertcount(2, $data);

        $done = 0;
        foreach ($data as $step) {
            if ($step['done'] === true) $done++;
            foreach ($step['sub'] as $sub) {
                if ($sub['done'] === true) $done++;
            };
        };

        $this->assertEquals($done, 0);
    }

    /** @test */
    public function onboarding_teacher_one_should_see_progress_of_steps_done()
    {
        $helper = (new OnboardingTestHelper());
        $obj = $helper->createNewWizardWithSteps();

        $user = User::where('username', self::USER_TEACHER)->first();

        $response = $this->get(
            $this->getUrlWithAuthCredentials(route('onboarding.show_steps_for_user', ['user' => $user->getKey()]), static::getTeacherOneAuthRequestData([]))
        );
        $response->assertStatus(200);
        $data = $response->decodeResponseJson();
        $this->assertEquals(4, $data['count_sub_steps']);
        $this->assertEquals(0, $data['count_sub_steps_done']);
    }


    /** @test */
    public function onboarding_teacher_one_should_get_a_full_list_of_steps_with_correct_count_steps_done()
    {
        $helper = (new OnboardingTestHelper());
        $obj = $helper->createNewWizardWithSteps();

        $user = User::where('username', self::USER_TEACHER)->first();

        $response = $this->post(
            route('onboarding.register_userstep'),
            static::getTeacherOneAuthRequestData([
                'onboarding_wizard_step_id' => $obj->steps[1],
            ])
        );

        $response->assertStatus(200);

        $response = $this->get(
            $this->getUrlWithAuthCredentials(route('onboarding.show_steps_for_user', ['user' => $user->getKey()]), static::getTeacherOneAuthRequestData([]))
        );
        $response->assertStatus(200);
        $data = $response->decodeResponseJson()['steps'];

        $this->assertcount(2, $data);

        $done = 0;
        foreach ($data as $step) {
            if ($step['done'] === true) $done++;
            foreach ($step['sub'] as $sub) {
                if ($sub['done'] === true) $done++;
            };
        };

        $this->assertEquals($done, 1);
    }


}
