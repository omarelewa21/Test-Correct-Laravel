<?php namespace tcCore\Providers;

use Aacotroneo\Saml2\Events\Saml2LoginEvent;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Session;
use tcCore\Http\Helpers\EntreeHelper;
use tcCore\SamlMessage;
use tcCore\User;

class EventServiceProvider extends ServiceProvider {

    /**
     * The event handler mappings for the application.
     *
     * @var array
     */
    protected $listen = [
        'event.name' => [
            'EventListener',
        ],
        'tcCore\Events\UserLoggedInEvent' => [
            'tcCore\Listeners\AddLoginLog',
            'tcCore\Listeners\SolveFailedLogin',
        ]
    ];

    public function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        Event::listen('Aacotroneo\Saml2\Events\Saml2LoginEvent', function (Saml2LoginEvent $event) {
            $messageId = $event->getSaml2Auth()->getLastMessageId();
            // Add your own code preventing reuse of a $messageId to stop replay attacks
            $user = $event->getSaml2User();
            $attr = $user->getAttributes();

            $entreeHelper = new EntreeHelper($attr, $messageId);
logger('check for replay attack and kill if so');
            $entreeHelper->blockIfReplayAttackDetected();
logger('check for unknown brin and kill if so');
            $entreeHelper->redirectIfBrinUnknown();
            logger('check for no sso and kill if so');
            $entreeHelper->redirectIfBrinNotSso();
            logger('check for no user and active lvs and kill if so');
            $entreeHelper->redirectIfUserWasNotFoundForEckIdAndActiveLVS();
            logger('check for not same role and kill if so');
            $entreeHelper->redirectIfUserNotHasSameRole();
            logger('check for scenario5 and kill if so');
            //scenario 5 still needs implementation;
            $entreeHelper->redirectIfScenario5();
            logger('check for no user and kill if so');
            $entreeHelper->redirectIfNoUserWasFoundForEckId();
            logger('check for user in same school and kill if so');
            $entreeHelper->redirectIfUserNotInSameSchool();
            logger('check for scenario2 and kill if so');
            $entreeHelper->handleScenario2IfAddressIsKnownInOtherAccount();
            logger('check for scenario1 and kill if so');
            $entreeHelper->handleScenario1();

            dd('No ECK_id on the request error (something went wrong?) Entree user.');

            //$laravelUser = //find user by ID or attribute
            //if it does not exist create it and go on  or show an error message
        });
    }



}
