<?php

namespace tcCore\FactoryScenarios\Selenium;

use Carbon\Carbon;
use tcCore\Factories\FactoryTest;
use tcCore\Factories\Questions\FactoryQuestionCompletionCompletion;
use tcCore\Factories\Questions\FactoryQuestionCompletionMulti;
use tcCore\Factories\Questions\FactoryQuestionGroup;
use tcCore\Factories\Questions\FactoryQuestionInfoscreen;
use tcCore\Factories\Questions\FactoryQuestionMatchingClassify;
use tcCore\Factories\Questions\FactoryQuestionMatchingMatching;
use tcCore\Factories\Questions\FactoryQuestionMultipleChoice;
use tcCore\Factories\Questions\FactoryQuestionMultipleChoiceARQ;
use tcCore\Factories\Questions\FactoryQuestionMultipleChoiceTrueFalse;
use tcCore\Factories\Questions\FactoryQuestionOpenLong;
use tcCore\Factories\Questions\FactoryQuestionOpenShort;
use tcCore\Factories\Questions\FactoryQuestionOpenWriting;
use tcCore\Factories\Questions\FactoryQuestionRanking;
use tcCore\FactoryScenarios\FactoryScenarioTestTakeDiscussed;
use tcCore\User;

class FactoryScenarioSeleniumAssessment extends FactoryScenarioSchoolCoLearning
{
    protected static string $prefix = 'Assessment';
    protected static string $scenario;

    public static function create($scenario = null)
    {
        self::$scenario = $scenario ?? 'navigation';
        return parent::create(); // TODO: Change the autogenerated stub
    }

    protected function createTestTake(User $teacherUser): void
    {
        $this->test = FactoryTest::create($teacherUser)
            ->setProperties(['name' => 'Assessment test for ' . self::$scenario])
            ->addQuestions($this->getQuestionsForScenario())
            ->getTestModel();
        $this->testTake = FactoryScenarioTestTakeDiscussed::createTestTake(
            user: $teacherUser,
            test: $this->test
        );
        $this->testTake->subject_name = $this->test->subject()->value('name');
    }

    private function getQuestionsForScenario()
    {
        if (self::$scenario == 'navigation') {
            return [
                FactoryQuestionOpenLong::create(),
                FactoryQuestionMultipleChoiceTrueFalse::create(),
                FactoryQuestionMultipleChoice::create(),
            ];
        }

        return [
            FactoryQuestionRanking::create(),
            FactoryQuestionOpenShort::create()
                ->addImageAttachment()
                ->addAudioAttachment()
                ->addAudioAttachment(true, true, 250)
                ->addVideoAttachment()
                ->addPdfAttachment(),
            FactoryQuestionOpenLong::create(),
            FactoryQuestionMultipleChoiceTrueFalse::create(),
            FactoryQuestionMultipleChoice::create(),
            FactoryQuestionMultipleChoiceARQ::create(),
            FactoryQuestionCompletionCompletion::create(),
            FactoryQuestionCompletionMulti::create(),
            FactoryQuestionMatchingMatching::create(),
            FactoryQuestionMatchingClassify::create(),
            FactoryQuestionGroup::create()
                ->addQuestions([
                    FactoryQuestionOpenLong::create()
                        ->setProperties(['question' => '<p>I am part of a group!</p>']),
                    FactoryQuestionMultipleChoice::create()
                        ->setProperties(['question' => '<p>Multiple choice sub question!</p>'])
                ]),
            FactoryQuestionOpenWriting::create(),
        ];
    }
}
